#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  normal=$4
  priority=$5

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Compute result status
  acceptanceRate=90
  totalTasks=$((normal+priority))
  
  priorCount=0
  normalCount=0
  for (( i=1; i<=priority; i++ )); do
      job_name=$(grep "Method definition" "${target_log_folder}/jobs/job${i}_NEW.out" | tr "[" "\\n" | tr "," "\\n" | tr "=" "\\n" | tr "]" "\\n" | tail -n 2 | head -n 1)
      if [ "${job_name}" == "" ]; then
         # GAT execution
         job_name=$(grep "Method Description 1" "${target_log_folder}/jobs/job${i}_NEW.out" | tr ":" "\\n" | tr " " "\\n" | tail -n 1)
      fi
       
      if [ "$job_name" != "normalTask" ]; then
	    priorCount=$((priorCount+1))
      else
	    normalCount=$((normalCount+1))
      fi
  done
  
  priorRate=$(((priorCount*100)/priority))
  if [ $priorRate -lt $acceptanceRate ]; then
    echo "[ERROR] Priority tasks are not correctly scheduled." | tee -a "${output_file}"
    exit 1
  fi
  
  priorCount=0
  normalCount=0
  for (( i=priority+1; i<=totalTasks; i++ )); do
      job_name=$(grep "Method definition" "${target_log_folder}/jobs/job${i}_NEW.out" | tr "[" "\\n" | tr "," "\\n" | tr "=" "\\n" | tr "]" "\\n" | tail -n 2 | head -n 1)
      if [ "${job_name}" == "" ]; then
         # GAT execution
         job_name=$(grep "Method Description 1" "${target_log_folder}/jobs/job${i}_NEW.out" | tr ":" "\\n" | tr " " "\\n" | tail -n 1)
      fi
      
      if [ "$job_name" != "normalTask" ]; then
	    priorCount=$((priorCount+1))
      else
	    normalCount=$((normalCount+1))
      fi
  done
  
  normalRate=$(((normalCount*100)/normal))
  if [ $normalRate -lt $acceptanceRate ]; then
    echo "[ERROR] Priority tasks are not correctly scheduled." | tee -a "${output_file}"
    exit 1  
  fi
  
  # Report result status
  exit 0