#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  TASK_WIDTH=$4
  TASK_DEPTH=$5
  TASK_CHILDS=$6
  INIT_VALUE=$7

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #---------------------------------------------------------------------------------- 
  # Compute result status
  final_counter_expected=$((INIT_VALUE+TASK_DEPTH))
  final_counters_got=$(grep "\\[INFO\\] Final counter value on file" "${output_file}" | tr " " "\\t" | awk '{ print $(NF) }')  
  
  for got in ${final_counters_got}; do
    if [ "${got}" != "${final_counter_expected}" ]; then
      echo "ERROR ON TASKS SCHEDULE" | tee -a "${output_file}"
      echo "EXPECTED: ${final_counter_expected}" | tee -a "${output_file}"
      echo "GOT:      ${got}" | tee -a "${output_file}"
      exit 1
    fi
  done
  
  #---------------------------------------------------------------------------------- 
  # Compute scheduling status
  # TODO: Check data scheduling status (see other tests)
  
  exit 0