#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Check normal tasks are executed in the same worker (because it has slots and has data locality)
  normalWorkers=$(grep "Assigning action" "${runtime_log}" | grep "normalTask" | awk '{ print $16 }')
  normalWorker1=$(echo "${normalWorkers}" | head -n 1)
  normalWorker2=$(echo "${normalWorkers}" | tail -n 1)
  if [ "${normalWorker1}" != "${normalWorker2}" ]; then
    echo "ERROR: Normal tasks are not correctly scheduled [${normalWorker1}|${normalWorker2}]" | tee -a "${output_file}"
    exit 1
  fi
  
  #----------------------------------------------------------------------------------
  # Check distributed tasks are executed in different workers
  distributedWorkers=$(grep "Assigning action" "${runtime_log}" | grep "distributedTask" | awk '{ print $16 }')
  distributedWorker1=$(echo "${distributedWorkers}" | head -n 1)
  distributedWorker2=$(echo "${distributedWorkers}" | tail -n 1)
  if [ "${distributedWorker1}" == "${distributedWorker2}" ]; then
    echo "ERROR: Normal tasks are not correctly scheduled" | tee -a "${output_file}"
    exit 1
  fi
  
  #----------------------------------------------------------------------------------
  # All checks passed. Report success status
  exit 0
