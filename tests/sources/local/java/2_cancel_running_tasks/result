#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  final_graph_expected=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"                                                                                                                                                                                                                          

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1 
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1 
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1 
    fi
  else
    # Empty error file, no exceptions could have been raised
    : 
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1 
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1 
  fi

  #----------------------------------------------------------------------------------
  # Compute result status
  writers=4
  FILES=14

  # Checks if the file has been written as many times as expected
  result=$(cat /tmp/sharedDisk/taskGroups.txt)
  if [ ${#result} -ne $writers ]; then
    echo "ERROR: The number of writing tasks is not correct. ${#result} "
    exit 1
  fi

  # Checks if the failed task has been executed through the creation of a job for each
  if [ ! -f "${target_log_folder}"/jobs/job"$FILES"_NEW.out ]; then
    echo "ERROR: All tasks have not completed succesfully."
    exit 1
  fi

  if [ -f "${target_log_folder}/jobs/job$((FILES+1))_NEW.out" ]; then
    echo "ERROR: More tasks than expected have been executed."
    exit 1
  fi
  
  # Check if barriers have been aded
  output1=$(cat "${runtime_log}" | grep "Added barrier for group" | grep -v "group App1" | wc -l)
  if [ "${output1}" -ne 2 ]; then
  	echo "ERROR: The barriers have not been added to the groups."
  	exit 1
  fi
  
  # Check if the tasks have finished correctly
  output1=$(cat "${runtime_log}" | grep "end status FINISHED" | wc -l)
  if [ "${output1}" -ne 10 ]; then
  	echo "ERROR: The number of correclty finished tasks is not correct. ${output1} (expected 10)"
  	exit 1
  fi
  
  # Check if all successors have been canceled
  output1=$(cat "${runtime_log}" | grep "Task canceled:" | wc -l)
  if [ "${output1}" -ne 8 ]; then
  	echo "ERROR: The number of canceled tasks is not correct. ${output1} (expected 12)"
  	exit 1
  fi

  # Check if the tasks have failed
  output1=$(grep -c "COMPSs Exception raised :" "${runtime_log}")
  if [ "${output1}" -ne 2 ]; then
  	echo "ERROR: The number of COMPSsExceptions raised is not correct. ${output1} (expected 2)"
  	exit 1
  fi
    
  # Check the exception message
  output1=$(grep -c -E "Group FailedGroup[0-9]*'s barrier raised a COMPSsException \( Second task threw an exception\)" "${runtime_log}")
  if [ "${output1}" -ne 2 ]; then
  	echo "ERROR: The thrown exception message is not correct."
  	exit 1
  fi
  
  #----------------------------------------------------------------------------------
  # Check dot file
  final_graph_got=${target_log_folder}/monitor/complete_graph.dot
  graph_status=$(diff -U 0 "${final_graph_expected}" "${final_graph_got}" | grep -v ^@ | grep -v "#" | tail -n+3)
  if [ ! -z "${graph_status}" ]; then
    echo "[ERROR] Obtained graph file is not as expected" | tee -a "${output_file}"
    exit 1
  fi

  #---------------------------------------------------------------------------------- 
  # ALL OK. Report result status
  exit 0
