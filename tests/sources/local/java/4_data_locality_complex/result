#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  base_app_dir=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi
  
  #----------------------------------------------------------------------------------
  # Define log files
  expected="${target_log_folder}/complexTest_expected.out"
  got="${target_log_folder}/complexTest_got.out"

  # Parse log files
  echo "[LOG] Parsing expected file"
  "${base_app_dir}"/result_getAvailableExpected "${runtime_log}" > "$expected"
  echo "[LOG] Parsing got file"
  "${base_app_dir}"/result_getSubmittedGot "${runtime_log}" > "$got"
  
  # Compute result
  echo "[LOG] Computing test result"
  # We check that all the got are executed as expected and viceversa
  resultAllGotIsExpected=$(grep -c -v -x -f "$got" "$expected" | cat)
  resultAllExpectedIsGot=$(grep -c -v -x -f "$expected" "$got" | cat)

  #----------------------------------------------------------------------------------
  # Report result status
  # Notice that the 3 first tasks can be scheduled anywhere (there are 4 free workers)
  if [ "$resultAllGotIsExpected" -gt 3 ] || [ "$resultAllExpectedIsGot" -gt 3 ]; then
     echo "ERROR: Task schedule do not respect score values." | tee -a "${output_file}"
     echo "Check logs/java_dataLocality.complexTest_expected.out and logs/java_dataLocality.complexTest_got.out" | tee -a "${output_file}"
     exit 1
  fi
  echo "[LOG] Success"
  
  exit 0
