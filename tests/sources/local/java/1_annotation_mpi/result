#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Check MPI task execution status
  exitValue=0
   
  dotValue=$(grep "TotalSum" "${output_file}" | tr ":" "\\t" | awk '{ print $2 }')
  
  singleGOT=$(grep "\\[RESULT\\] MPI Task1" "${output_file}" | grep "MULTIPLICATION_RESULT" | awk '{ print $NF }')
  if [ "$singleGOT" -ne "$dotValue" ]; then
    echo "ERROR: Single MPI execution failed" | tee -a "${output_file}"
    echo "  GOT: $singleGOT" | tee -a "${output_file}"
    echo "  EXPECTED: $dotValue" | tee -a "${output_file}"
    exitValue=1
  fi
  
  multipleGOT=$(grep "\\[RESULT\\] MPI Task2" "${output_file}" | grep "MULTIPLICATION_RESULT" | awk '{ print $NF }')
  if [ "$multipleGOT" -ne "$dotValue" ]; then
    echo "ERROR: Multiple MPI execution failed" | tee -a "${output_file}"
    echo "  GOT: $multipleGOT" | tee -a "${output_file}"
    echo "  EXPECTED: $dotValue" | tee -a "${output_file}"
    exitValue=1
  fi
  
  concurrent1GOT=$(grep "\\[RESULT\\] MPI CONC Task1" "${output_file}" | grep "MULTIPLICATION_RESULT" | awk '{ print $NF }')
  if [ "$concurrent1GOT" -ne "$dotValue" ]; then
    echo "ERROR: Concurrent1 Multiple MPI execution failed" | tee -a "${output_file}"
    echo "  GOT: $concurrent1GOT" | tee -a "${output_file}"
    echo "  EXPECTED: $dotValue" | tee -a "${output_file}"
    exitValue=1
  fi
  
  concurrent2GOT=$(grep "\\[RESULT\\] MPI CONC Task2" "${output_file}" | grep "MULTIPLICATION_RESULT"  | awk '{ print $NF }')
  if [ "$concurrent2GOT" -ne "$dotValue" ]; then
    echo "ERROR: Concurrent2 Multiple MPI execution failed" | tee -a "${output_file}"
    echo "  GOT: $concurrent2GOT" | tee -a "${output_file}"
    echo "  EXPECTED: $dotValue" | tee -a "${output_file}"
    exitValue=1
  fi

  thconcurrent1GOT=$(grep "\\[RESULT\\] MPI THREADCONC Task1" "${output_file}" | grep "MULTIPLICATION_RESULT" | awk '{ print $NF }')
  if [ "$thconcurrent1GOT" -ne "$dotValue" ]; then
    echo "ERROR: ThreadConcurrent1 Multiple MPI execution failed" | tee -a "${output_file}"
    echo "  GOT: $thconcurrent1GOT" | tee -a "${output_file}"
    echo "  EXPECTED: $dotValue" | tee -a "${output_file}"
    exitValue=1
  fi
    
  thconcurrent2GOT=$(grep "\\[RESULT\\] MPI THREADCONC Task2" "${output_file}" | grep "MULTIPLICATION_RESULT"  | awk '{ print $NF }')
  if [ "$thconcurrent2GOT" -ne "$dotValue" ]; then
    echo "ERROR: Concurrent2 Multiple MPI execution failed" | tee -a "${output_file}"
    echo "  GOT: $thconcurrent2GOT" | tee -a "${output_file}"
    echo "  EXPECTED: $dotValue" | tee -a "${output_file}"
    exitValue=1
  fi
  
  #----------------------------------------------------------------------------------
  # Check that MPI command from multi-node task uses 4 cores
  jobOut=${target_log_folder}/jobs/job2_NEW.out
  numProcsExpected=4
  numProcsGot=$(grep "\\[MPI INVOKER\\] MPI CMD" "${jobOut}" | tr " " "\\t" | awk '{ print $9 }')
  if [ "${numProcsGot}" -ne "${numProcsExpected}" ]; then
    echo "ERROR: Incorrect number of MPI Processes for multi-node task." | tee -a "${output_file}"
    echo "  GOT: ${numProcsGot}" | tee -a "${output_file}"
    echo "  EXPECTED: ${numProcsExpected}" | tee -a "${output_file}"
    exitValue=1
  fi
  
  #----------------------------------------------------------------------------------
  # Check that MPI command from multi-node task uses two different hosts
  jobOut=${target_log_folder}/jobs/job2_NEW.out
  numNodesExpected=2
  numNodesGot=$(grep "\\[INVOKER\\] COMPSS_HOSTNAMES" "${jobOut}" | awk '{ print $NF }' | tr "," "\\n" | awk '!a[$0]++' | wc -l)
  if [ "${numNodesGot}" -ne "${numNodesExpected}" ]; then
    echo "ERROR: Multi-node task not using different hosts" | tee -a "${output_file}"
    echo "  GOT: ${numNodesGot}" | tee -a "${output_file}"
    echo "  EXPECTED: ${numNodesExpected}" | tee -a "${output_file}"
    exitValue=1
  fi
  
  #----------------------------------------------------------------------------------
  # Check that MPI command from multi-node concurrent task 1 uses 2 cores
  jobOut=${target_log_folder}/jobs/job3_NEW.out
  numProcsExpected=2
  numProcsGot=$(grep "\\[MPI INVOKER\\] MPI CMD" "${jobOut}" | tr " " "\\t" | awk '{ print $9 }')
  if [ "${numProcsGot}" -ne "${numProcsExpected}" ]; then
    echo "ERROR: Incorrect number of MPI Processes for multi-node concurrent task 1." | tee -a "${output_file}"
    echo "  GOT: ${numProcsGot}" | tee -a "${output_file}"
    echo "  EXPECTED: ${numProcsExpected}" | tee -a "${output_file}"
    exitValue=1
  fi
  
  #----------------------------------------------------------------------------------
  # Check that MPI command from multi-node concurrent task 2 uses 2 cores
  jobOut=${target_log_folder}/jobs/job3_NEW.out
  numProcsExpected=2
  numProcsGot=$(grep "\\[MPI INVOKER\\] MPI CMD" "${jobOut}" | tr " " "\\t" | awk '{ print $9 }')
  if [ "${numProcsGot}" -ne "${numProcsExpected}" ]; then
    echo "ERROR: Incorrect number of MPI Processes for multi-node concurrent task 2." | tee -a "${output_file}"
    echo "  GOT: ${numProcsGot}" | tee -a "${output_file}"
    echo "  EXPECTED: ${numProcsExpected}" | tee -a "${output_file}"
    exitValue=1
  fi

  #----------------------------------------------------------------------------------
  # Check that MPI Thread concurrent use different CUs
  jobOut1=${target_log_folder}/jobs/job5_NEW.out
  jobOut2=${target_log_folder}/jobs/job6_NEW.out
  cus1=$(grep "COMPSS_NUM_THREADS" "${jobOut1}" | awk '{ print $NF }')
  cus2=$(grep "COMPSS_NUM_THREADS" "${jobOut2}" | awk '{ print $NF }')
  if [ "$cus1" -eq "$cus2" ]; then
    echo "ERROR: Thread concurrent have not independent properties"
    echo "  GOT: CUS1 = $cus1 , CUS2 = $cus2"
    exitValue=1
  fi

  #---------------------------------------------------------------------------------- 
  # Report result status
  exit ${exitValue}
