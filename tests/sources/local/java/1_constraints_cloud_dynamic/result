#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Compute result status
  WORKER_CORES=4
  TASK_CORE_REQ=(0 3 3 1 1)
  
  TASK_JOBS=()
  jobs=$(grep -v "TaskScheduler" "${runtime_log}" | grep -E "jobCompleted|New Job" | cut -c 79-)

  while read -r line; do
    first=$(echo "$line" | awk '{ print $1 }')
    if [ "$first" == "New" ]; then
      jobId=$(echo "$line" | awk '{ print $3 }')
      taskId=$(echo "$line" | awk '{ print $5 }')
      taskId=${taskId::-1}
      TASK_JOBS[$jobId]=$taskId

      cpu=${TASK_CORE_REQ[$taskId]}
      WORKER_CORES=$((WORKER_CORES-cpu))
      if [ "$WORKER_CORES" -lt "0" ]; then
        echo "[ERROR] Dynamic available resources are not correctly managed." | tee -a "${output_file}"
        echo "The execution of task $taskId overloads the resource" | tee -a "${output_file}"
        exit 1
      fi
    else
      jobId=$(echo "$line" | awk '{ print $6 }')
      taskId=${TASK_JOBS[$jobId]}
      cpu=${TASK_CORE_REQ[$taskId]}
      WORKER_CORES=$((WORKER_CORES+cpu))
    fi
  done <<< "$jobs"
  
  exit 0