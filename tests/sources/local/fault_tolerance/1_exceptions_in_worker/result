#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  python_interpreter=$4
  error_type=$5

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Do not check standard out/err status since test must fail
  # Do not check unit tests status since test must fail

  #----------------------------------------------------------------------------------
  # Compute result status
  if grep -q "ERROR" "${output_file}"; then
    echo "An ERROR occurred running the test - INVALID RESULT." | tee -a "${output_file}"
    exit 2
  fi

  # Check that ErrorManager has raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
       echo "[RESULT_CHECKER] ErrorManager raised and ERROR as expected" | tee -a "${output_file}"
    else
      echo "[ERROR] ErrorManager did not raise any error" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] ErrorManager did not raise any error" | tee -a "${output_file}"
    exit 1
  fi
  # Check that the Runtime has registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "[RESULT_CHECKER] ErrorManager registered an ERROR as expected" | tee -a "${output_file}"
    else
      echo "[ERROR] ErrorManager did not register any error" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  # Check job error files
  job_file="${target_log_folder}/jobs/job1_NEW.err"
  if grep -q "Traceback" "${job_file}"; then
    echo "Traceback found - OK" | tee -a "${output_file}"
    if [ "$error_type" == 'exception' ]; then
      if grep -q "Exception: GENERAL EXCEPTION RAISED - HAPPENED IN A TASK" "${job_file}"; then
        echo "Exception found - OK" | tee -a "${output_file}"
      else
        echo "Exception not found - ERROR" | tee -a "${output_file}"
        exit 1
      fi
    else
      if grep -q "ModuleNotFoundError: No module named 'bad'" "${job_file}"; then
        # Python >= 3.6
        echo "Exception found - OK" | tee -a "${output_file}"
      elif grep -q "ImportError: No module named 'bad'" "${job_file}"; then
        # Python < 3.6
        echo "Exception found - OK" | tee -a "${output_file}"
      else
        echo "Exception not found - ERROR" | tee -a "${output_file}"
        exit 1
      fi
    fi
  else
    echo "Traceback not found - ERROR" | tee -a "${output_file}"
    exit 1
  fi

  job_file="${target_log_folder}/jobs/job1_RESUBMITTED.err"
  if grep -q "Traceback" "${job_file}"; then
    echo "Traceback found - OK" | tee -a "${output_file}"
    if [ "$error_type" == 'exception' ]; then
      if grep -q "Exception: GENERAL EXCEPTION RAISED - HAPPENED IN A TASK" "${job_file}"; then
        echo "Exception found - OK" | tee -a "${output_file}"
      else
        echo "Exception not found - ERROR" | tee -a "${output_file}"
        exit 1
      fi
    else
      if grep -q "ModuleNotFoundError: No module named 'bad'" "${job_file}"; then
        # Python >= 3.6
        echo "Exception found - OK" | tee -a "${output_file}"
      elif grep -q "ImportError: No module named 'bad'" "${job_file}"; then
        # Python < 3.6
        echo "Exception found - OK" | tee -a "${output_file}"
      else
        echo "Exception not found - ERROR" | tee -a "${output_file}"
        exit 1
      fi
    fi
  else
    echo "Traceback not found - ERROR" | tee -a "${output_file}"
    exit 1
  fi

  exit 0
