#!/bin/bash
# Obtain parameters

COMPSs_exec=$1
comm=$2
runcompss_opts=$3
base_app_dir=$4
COMPSs_log_folder=$5
target_log_folder=$6
retry_num=$7
execution_envs=$8

# Global variables
AGENT_PIDS=""
exit_value=0
jar_name="1_tracing_agents.jar"
app_name="tracing.Agents"
expectedTime="60s"


# Traps and Handlers
function kill_agents() {
    for pid in ${AGENT_PIDS}; do
        kill -SIGINT ${pid} 1>/dev/null 2>/dev/null
    done
}
trap kill_agents EXIT


#----------------------------------------------------------------------------------
# Generate Project.xml according to system
sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

#----------------------------------------------------------------------------------
# Create all working dir folders
mkdir -p /tmp/COMPSsWorker01/

#----------------------------------------------------------------------------------
# Run application
echo **************************************************************
echo **************************************************************
echo "*** RUNNING JAVA AGENTS APPLICATION TRACING"
echo **************************************************************
echo **************************************************************
log_dir="${COMPSs_log_folder}/${app_name}_0${retry_num}"
mkdir -p "${log_dir}"
output_log="${log_dir}/test.outputlog"
error_log="${log_dir}/test.errorlog"
touch "${output_log}"
touch "${error_log}"

# ---------------------------------------
# ---------- STARTING AGENTS ------------
# ---------------------------------------

compss_agent_start_service \
    --num_agents=4 \
    --topology=plain \
    --classpath="${base_app_dir}/${jar_name}" \
    --log_dir="${log_dir}" \
    --debug \
    --exec_time=${expectedTime} \
    --tracing \
    ${runcompss_opts} \
    --reuse_resources_on_block="false" \
    --project="${base_app_dir}/project.xml" \
    --resources="${base_app_dir}/resources.xml" \
    --cei="tracing.DemoClassItf" \
    tracing.DemoClass 2

pid_agent_launch=$!
wait ${pid_agent_launch}

# Check timeout
exit_code=$?
if [[ "${exit_code}" = "124" ]]; then
    # Copy LOG files
    cp -rf "${COMPSs_log_folder}/${app_name}_0${retry_num}"/* "${target_log_folder}"
    
    # Report time out
    echo "[WARNING] Java Application timed out" >> "${output_log}"
    exit_value=124
else
    #echo "Application finished with value ${exit_code}. Checking results" 	  
    # Copy LOG files
    cp -rf "${COMPSs_log_folder}/${app_name}_0${retry_num}"/* "${target_log_folder}"


    # Check result
    python3 "${base_app_dir}"/result.py "${log_dir}/COMPSsWorker01/trace" "${log_dir}/COMPSsWorker02/trace" "${log_dir}/COMPSsWorker03/trace" "${log_dir}/COMPSsWorker04/trace" "${log_dir}/resultatTraceMerge"
    exit_value=$?
    echo "Result script finished with value ${exit_value}"
fi

#----------------------------------------------------------------------------------
# Return execution status
exit ${exit_value}
