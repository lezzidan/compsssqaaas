#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  comm=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  # Check that user events are present and the # is correct

  # User events - should be equal to task_tracing_userEvents_*.py
  # The amount of events depends
  USER_EVENTS=70000100
  CLUSTER_MAIN_LOOP=400
  PARTIAL_SUM=401
  REDUCE_KEY=402
  REDUCE_NO_KEY=403
  GENERATE=404
  # Expected events
  expected_user_event_cluster="12"
  expected_user_event_partial_sum="12"
  expected_user_event_reduce_key="12"
  expected_user_event_reduce_no_key="0"
  expected_user_event_generate="2"
  expected_user_event_zeros="38"

  # GAT does not support task tracing
  exit_value=0
  if [ "${comm}" != "es.bsc.compss.gat.master.GATAdaptor" ]; then
    user_event_cluster=$(grep -c ":${USER_EVENTS}:${CLUSTER_MAIN_LOOP}" "${target_log_folder}"/trace/*.prv)
    user_event_partial_sum=$(grep -c ":${USER_EVENTS}:${PARTIAL_SUM}" "${target_log_folder}"/trace/*.prv)
    user_event_reduce_key=$(grep -c ":${USER_EVENTS}:${REDUCE_KEY}" "${target_log_folder}"/trace/*.prv)
    user_event_reduce_no_key=$(grep -c ":${USER_EVENTS}:${REDUCE_NO_KEY}" "${target_log_folder}"/trace/*.prv | cat)
    user_event_generate=$(grep -c ":${USER_EVENTS}:${GENERATE}" "${target_log_folder}"/trace/*.prv)
    user_event_zeros=$(grep -c ":${USER_EVENTS}:0" "${target_log_folder}"/trace/*.prv)

    if [ "${user_event_cluster}" != "${expected_user_event_cluster}" ] ||
           [ "${user_event_partial_sum}" != "${expected_user_event_partial_sum}" ] ||
           [ "${user_event_reduce_key}" != "${expected_user_event_reduce_key}" ] ||
           [ "${user_event_reduce_no_key}" != "${expected_user_event_reduce_no_key}" ] ||
           [ "${user_event_generate}" != "${expected_user_event_generate}" ]; then
      echo "[ERROR] Missing user events." | tee -a "${output_file}"
      echo "Cluster task events: Expected: ${expected_user_event_cluster} Got: ${user_event_cluster}" | tee -a "${output_file}"
      echo "Partial sum task events: Expected: ${expected_user_event_partial_sum} Got: ${user_event_partial_sum}" | tee -a "${output_file}"
      echo "Reduce key task events: Expected: ${expected_user_event_reduce_key} Got: ${user_event_reduce_key}" | tee -a "${output_file}"
      echo "Reduce no key task events: Expected: ${expected_user_event_reduce_no_key} Got: ${user_event_reduce_no_key}" | tee -a "${output_file}"
      echo "Generate task events: Expected: ${expected_user_event_generate} Got: ${user_event_generate}" | tee -a "${output_file}"
      echo "Zero events: Expected: ${expected_user_event_zeros} Got: ${user_event_zeros}" | tee -a "${output_file}"
      exit_value=1
    fi

    emitted_tasks=$((user_event_cluster + user_event_partial_sum + user_event_reduce_key + user_event_reduce_no_key + user_event_generate))
    if [ "${emitted_tasks}" != "${user_event_zeros}" ]; then
      echo "[ERROR] The emitted tasks does not match the number of zero events." | tee -a "${output_file}"
      echo "Emited task events: Expected: ${emitted_tasks}" | tee -a "${output_file}"
      echo "Zero events: ${user_event_zeros}" | tee -a "${output_file}"
      exit_value=1
    fi
  fi

  # Exit value
  exit ${exit_value}
