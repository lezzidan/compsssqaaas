#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  comm=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  # Minimal events:
  number_of_tasks=100
  number_of_workers=1
  number_of_master_events=1882
  number_of_master_finish_events=1881  # The last compss stop does not include 0 since the runtime has been stopped and the trace generated.

  # Should be equal to Tracer.java definitions
  SYNC_EVENTS=8000666
  TASK_EVENTS=9000100
  WORKER_EVENTS=9000200
  MASTER_EVENTS=9000300

  # Check that minimal task-bindings events are present and the # is correct

  # GAT does not support task tracing
  if [ "${comm}" != "es.bsc.compss.gat.master.GATAdaptor" ]; then
    echo "BASIC EVENTS CHECK:"

    evts_tasks=$(grep -c ":${TASK_EVENTS}:[1-9][0-9]*" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv)
    echo "evts_tasks: ${evts_tasks}"
    evts_tasks_end=$(grep -c ":${TASK_EVENTS}:0" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv)
    echo "evts_tasks_end: ${evts_tasks_end}"

    evts_tasks_running=$(grep -c ":${WORKER_EVENTS}:2" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv)
    echo "evts_tasks_running: ${evts_tasks_running}"
    evts_worker_running=$(grep -c ":${WORKER_EVENTS}:1" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv)
    echo "evts_worker_running: ${evts_worker_running}"

    sync_evts_init=$(grep -c ":${SYNC_EVENTS}:[1-9][0-9]*" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv)
    echo "sync_evts_init: ${sync_evts_init}"
    sync_evts_end=$(grep -c ":${SYNC_EVENTS}:0" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv)
    echo "sync_evts_end: ${sync_evts_end}"

    master_evts_init=$(grep -c ":${MASTER_EVENTS}:[1-9][0-9]*" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv)
    echo "master_evts_init: ${master_evts_init}"
    master_evts_end=$(grep -c ":${MASTER_EVENTS}:0" "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv)
    echo "master_evts_end: ${master_evts_end}"

    if [ "${evts_tasks_end}" != "${evts_tasks}" ]; then
      echo "[ERROR] Start and end events counts do not match. [${evts_tasks}/${evts_tasks_end}]" | tee -a "${output_file}"
      exit 1
    fi

    if [ "${evts_tasks_running}" != "${number_of_tasks}" ]; then
      echo "[ERROR] Running task events count does not match total tasks. [${evts_tasks_running}/${number_of_tasks}]" | tee -a "${output_file}"
      exit 1
    fi

    if [ "${evts_worker_running}" != "1" ] ; then
      echo "[ERROR] Number of worker start events different than actual number of workers [${evts_worker_running} != 1]" | tee -a "${output_file}"
      exit 1
    fi

    if [ "${sync_evts_init}" -ne "$((4 * number_of_workers))" ] || [ "${sync_evts_end}" -ne "$((4 * number_of_workers))" ]; then
      echo "[ERROR] Number of start and end synchronization events are not 8 times the number of workers. Expected events: $((8 * number_of_workers)) != Found Events: [${sync_evts_init} + ${sync_evts_end}]" | tee -a "${output_file}"
      exit 1
    fi

    if [ "${master_evts_init}" != "$number_of_master_events" ]; then
      echo "[ERROR] Number of master events does not match the expected. Expected events: $number_of_master_events != Found Events: ${master_evts_init}" | tee -a "${output_file}"
      exit 1
    fi
    if [ "${master_evts_end}" != "$number_of_master_finish_events" ] && [ "${master_evts_end}" != "$number_of_master_events" ]; then
      # In Python3 the final end event is registered so we can have 554 or 555 end events
      echo "[ERROR] Number of master finish (0) events does not match the expected. Expected events: $number_of_master_finish_events != Found Events: ${master_evts_end}" | tee -a "${output_file}"
      exit 1
    fi
  fi

  # Check that all task-bindings events are present and the # is correct
  # To this end, compare as much as possible with the expected trace stored
  # in the expected_trace folder.

  # GAT does not support task tracing
  if [ "${comm}" != "es.bsc.compss.gat.master.GATAdaptor" ]; then
    echo "IMPROVED EVENTS CHECK:"

    python3 events_checker.py expected_events.txt "${target_log_folder}"/trace/task_tracing_kmeans.py_compss*.prv
    exit_value=$?
    if [ ${exit_value} -ne 0 ]; then
      exit ${exit_value}
    fi
  fi

  # Exit value
  exit 0
