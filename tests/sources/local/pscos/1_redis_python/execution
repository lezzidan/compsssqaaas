#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retry_num=$7
  execution_envs=$8

  # Global variables
  exit_value=1
  app_name="testredis.py"

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/
  
  # Wait for system sockets to close
  sleep 15s
  #----------------------------------------------------------------------------------
  # Download the specified Redis Version, unzip it, compile the redis-server
  # utility, move it to the main folder and execute the main test
  REDIS_VERSION=$(cat REDIS-VERSION)
  REDIS_URL=http://download.redis.io/releases
  REDIS_FOLDER=redis-${REDIS_VERSION}
  REDIS_TAR_NAME=${REDIS_FOLDER}.tar.gz
  # Download Redis
  wget ${REDIS_URL}/"${REDIS_TAR_NAME}"
  # Uncompress it
  tar -xzvf "${REDIS_TAR_NAME}"
  rm "${REDIS_TAR_NAME}"
  # Go to the Redis directory and compile the redis-server utility
  (
  cd "${REDIS_FOLDER}" || exit 1
  make redis-server
  )
  # Move the redis-server executable to the main folder
  cp "${REDIS_FOLDER}"/src/redis-server redis-server
  rm -rf "${REDIS_FOLDER}"

  # Bundle-related variables
  # bundle_path=${base_app_dir}/COMPSs-Redis-bundle

  # Set a single standalone Redis instance
  ./redis-server --daemonize yes

  # Create a storage_conf file
  storage_conf=${base_app_dir}/storage.conf
  cat > "$storage_conf" << EOF
COMPSsWorker01
EOF

  # Add trap to kill redis instance/s
  clean() {
    pkill redis
  }
  trap clean EXIT

  #----------------------------------------------------------------------------------
  # Run application
  echo
  echo "*** RUNNING PYTHON APPLICATION REDIS PSCOs"

  for python_interpreter in ${execution_envs}; do
    echo "   - Running with Interpreter: ${python_interpreter}"
    output_log="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.outputlog"
    error_log="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.errorlog"
    specific_log_dir="${COMPSs_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"
    exec_target_log_folder="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"
    mkdir -p "${exec_target_log_folder}"
    expectedTime=360s

    python_mpi_worker=""
    if [ "$python_interpreter" == 'python3_mpi' ]; then
       echo "WARN: Test not requiered for ${python_interpreter}" | tee -a "${output_log}"
       continue
    fi

    # shellcheck disable=SC2086
    timeout --signal=2 $expectedTime "${COMPSs_exec}" \
      --project="${base_app_dir}"/project.xml \
      --resources="${base_app_dir}"/resources.xml \
      \
      --comm="$comm" \
      \
      --lang=python \
      --storage_impl=redis \
      --storage_conf=${storage_conf} \
      --python_interpreter="${python_interpreter}" \
      --pythonpath="${base_app_dir}"/src:"${base_app_dir}"/src/modules: \
      --specific_log_dir="${specific_log_dir}" \
      ${python_mpi_worker} \
      \
      --debug \
      -g \
      \
      ${runcompss_opts} \
      \
      "${base_app_dir}/src/${app_name}" > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

    # Check timeout
    if [[ "$?" = "124" ]]; then
      # Copy LOG files
      cp -rf "${specific_log_dir}"/* "${exec_target_log_folder}"

      # Report time out
      echo "[WARNING] Python Application timed out" >> "${output_log}"
      exit_value=124
    else
      # Copy LOG files
      cp -rf "${specific_log_dir}"/* "${exec_target_log_folder}"

      # Check result
      "${base_app_dir}"/result "${output_log}" "${error_log}" "${exec_target_log_folder}"
      exit_value=$?
    fi

    if [ ${exit_value} -ne 0 ]; then
      exit ${exit_value}
    fi
  done

  #----------------------------------------------------------------------------------
  # Return execution status
  exit ${exit_value}
