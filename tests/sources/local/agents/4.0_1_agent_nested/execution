#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retry_num=$7
  execution_envs=$8
  
  # Global variables
  AGENT_PIDS=""
  exit_value=0
  NUM_RETRIES="50"
  jar_name="4.0_1_agent_nested.jar"
  app_name="4.0_1_agent_nested"
  expectedTime="60s"

  # Traps and Handlers
  function kill_agents() {
    for pid in ${AGENT_PIDS}; do
      kill -SIGINT ${pid}
    done
  }
  trap kill_agents EXIT

  function validate_parallel_running_tasks() {
    starts="${1}"
    ends="${2}"
    min_parallel_tasks=${3}
    limit_parallel_tasks=${4}
    
    already_started=0
    max_parallel_tasks=0
    for start in ${starts}; do
      already_started=$((already_started + 1))
      already_ended="0";
      for end in ${ends}; do
        if [ "${end}" -le "${start}" ]; then
          already_ended=$((already_ended + 1))
        fi
      done
      running_tasks=$((already_started - already_ended))
      if [ "${running_tasks}" -gt "${max_parallel_tasks}" ]; then
        max_parallel_tasks=${running_tasks}
      fi
    done
    if [ ${max_parallel_tasks} -lt "${min_parallel_tasks}" ]; then
      echo "Simultaneous tasks not properly managed. Found ${max_parallel_tasks} running in parallel and at least ${min_parallel_tasks} expected."  > >(tee -a "${error_log}")
      exit 1
    fi
    if [ ${max_parallel_tasks} -gt "${limit_parallel_tasks}" ]; then
      echo "Simultaneous tasks not properly managed. Found ${max_parallel_tasks} running in parallel and only ${limit_parallel_tasks} expected."  > >(tee -a "${error_log}")
      exit 1
    fi
  }


  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml
  
  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/
  
  #----------------------------------------------------------------------------------
  # Run application
  echo ""
  echo "*** RUNNING AGENTS TEST: nested compss 1 agent"
  log_dir="${COMPSs_log_folder}/${app_name}_0${retry_num}/"
  mkdir -p "${log_dir}"
  output_log="${log_dir}test.outputlog"
  error_log="${log_dir}test.errorlog"
  touch "${output_log}"
  touch "${error_log}"

  # Starting agent
  agent1_log_dir="${log_dir}agent1/"
  mkdir -p "${agent1_log_dir}" 
  agent1_output_log="${log_dir}agent1.outputlog"
  agent1_error_log="${log_dir}agent1.errorlog"

  compss_agent_start_service \
    --num_agents=1 \
    --classpath="${base_app_dir}/${jar_name}" \
    --log_dir="${agent1_log_dir}" \
    --reuse_resources_on_block="false" \
    -d \
    --exec_time=${expectedTime} \
    ${runcompss_opts} \
    --project="${base_app_dir}/project.xml" \
    --resources="${base_app_dir}/resources.xml" \
    --cei="recursive.CountItf" \
    "recursive.Count" 3

  if [ ! -f "${agent1_log_dir}/COMPSsWorker01/jobs/job1_NEW.out" ]; then
    echo "Could not invoke recursive.Count's main method." > >(tee -a "${error_log}")
    exit 1
  fi

  job1_method=$( grep "METHOD NAME" "${agent1_log_dir}/COMPSsWorker01/jobs/job1_NEW.out" | cut -d '=' -f3 )
  if [ -n "${job1_method}" ]; then
    job1_method="${job1_method::-1}"
  fi
  if [ ! "${job1_method}" == "main" ]; then
    echo "Could not invoke recursive.Count's main method." > >(tee -a "${error_log}")
    exit 1
  fi
  echo  "recursive.Count's main method properly started" > >(tee -a "${output_log}")

  sleep 1s

  created_jobs=$(ls "${agent1_log_dir}COMPSsWorker01/jobs" | grep -c NEW.out)
  if [ ! "${created_jobs}" == "4" ]; then
    echo "COMPSs has generated ${created_jobs} tasks and only 4 expected." > >(tee -a "${error_log}")
    exit 1
  fi 

  job2_method=$( grep "METHOD NAME" "${agent1_log_dir}/COMPSsWorker01/jobs/job2_NEW.out" | cut -d '=' -f3)
  if [ -n "${job2_method}" ]; then
    job2_method="${job2_method::-1}"
  fi
  job3_method=$( grep "METHOD NAME" "${agent1_log_dir}/COMPSsWorker01/jobs/job3_NEW.out" | cut -d '=' -f3)
  if [ -n "${job3_method}" ]; then
    job3_method="${job3_method::-1}"
  fi
  job4_method=$( grep "METHOD NAME" "${agent1_log_dir}/COMPSsWorker01/jobs/job4_NEW.out" | cut -d '=' -f3)
  if [ -n "${job4_method}" ]; then
    job4_method="${job4_method::-1}"
  fi
  job2_value=$( grep -v "\[" "${agent1_log_dir}/COMPSsWorker01/jobs/job2_NEW.out" | tail -n 1)
  job3_value=$( grep -v "\[" "${agent1_log_dir}/COMPSsWorker01/jobs/job3_NEW.out" | tail -n 1)
  job4_value=$( grep -v "\[" "${agent1_log_dir}/COMPSsWorker01/jobs/job4_NEW.out" | tail -n 1)
  if [ ! "${job2_method}" == "count" ]; then
    echo "Unexpected method (${job2_method}) for job 2." > >(tee -a "${error_log}")
    exit 1
  fi
  if [ ! "${job2_value}" == "3" ]; then
    echo "Unexpected value (${job2_value}) for job 2." > >(tee -a "${error_log}")
    exit 1
  fi
  if [ ! "${job3_method}" == "count" ]; then
    echo "Unexpected method (${job3_method}) for job 3." > >(tee -a "${error_log}")
    exit 1
  fi
  if [ ! "${job3_value}" == "2" ]; then
    echo "Unexpected value (${job3_value}) for job 3." > >(tee -a "${error_log}")
    exit 1
  fi
  if [ ! "${job4_method}" == "count" ]; then
    echo "Unexpected method (${job34_method}) for job 4." > >(tee -a "${error_log}")
    exit 1
  fi
  if [ ! "${job4_value}" == "1" ]; then
    echo "Unexpected value (${job4_value}) for job 4." > >(tee -a "${error_log}")
    exit 1
  fi
  echo "All task executed as expected and with the expected values." 

  # Copy LOG files
  cp -rf "${COMPSs_log_folder}/${app_name}_0${retry_num}"/* "${target_log_folder}"
  exit_value=0

  #----------------------------------------------------------------------------------
  # Return execution status
  exit ${exit_value}
