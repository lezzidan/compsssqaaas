#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retry_num=$7
  execution_envs=$8

  # Global variables
  AGENT_PIDS=""
  exit_value=0
  NUM_RETRIES="50"
  app_name="1agent"

  # Traps and Handlers
  function kill_agents() {
    for pid in ${AGENT_PIDS}; do
      kill -SIGINT ${pid}
    done
  }
  trap kill_agents EXIT

  function validate_parallel_running_tasks() {
    starts="${1}"
    ends="${2}"
    min_parallel_tasks=${3}
    limit_parallel_tasks=${4}

    already_started=0
    max_parallel_tasks=0
    for start in ${starts}; do
      already_started=$((already_started + 1))
      already_ended="0";
      for end in ${ends}; do
        if [ "${end}" -le "${start}" ]; then
          already_ended=$((already_ended + 1))
        fi
      done
      running_tasks=$((already_started - already_ended))
      if [ "${running_tasks}" -gt "${max_parallel_tasks}" ]; then
        max_parallel_tasks=${running_tasks}
      fi
    done
    if [ ${max_parallel_tasks} -lt "${min_parallel_tasks}" ]; then
      echo "Simultaneous tasks not properly managed. Found ${max_parallel_tasks} running in parallel and at least ${min_parallel_tasks} expected."  > >(tee -a "${error_log}")
      exit 1
    fi
    if [ ${max_parallel_tasks} -gt "${limit_parallel_tasks}" ]; then
      echo "Simultaneous tasks not properly managed. Found ${max_parallel_tasks} running in parallel and only ${limit_parallel_tasks} expected."  > >(tee -a "${error_log}")
      exit 1
    fi
  }


  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  # Run application
  echo ""
  echo "*** RUNNING AGENTS TEST: nested pycompss with 1 agent"

  port_offset=100
  for python_interpreter in ${execution_envs}; do
    echo "   - Running with Interpreter: ${python_interpreter}"

    log_dir="${COMPSs_log_folder}/${app_name}_${python_interpreter}_0${retry_num}/"
    mkdir -p "${log_dir}"
    output_log="${log_dir}test.outputlog"
    error_log="${log_dir}test.errorlog"
    touch "${output_log}"
    touch "${error_log}"

    # Starting agent
    agent1_log_dir="${log_dir}/agent1/"
    mkdir -p "${agent1_log_dir}"
    agent1_output_log="${log_dir}agent1.outputlog"
    agent1_error_log="${log_dir}agent1.errorlog"


    python_mpi_worker="--python_mpi_worker=false"
    if [ "$python_interpreter" == 'python3_mpi' ]; then
        python_interpreter="python3"
        python_mpi_worker="--python_mpi_worker=true"
    fi

    rest_port=$(( 46000 + port_offset + 1))
    comm_port=$(( 46000 + port_offset + 2))

    compss_agent_start \
      --hostname="COMPSsWorker01" \
      --pythonpath="${base_app_dir}/src" \
      --log_dir="${agent1_log_dir}" \
      --rest_port="${rest_port}" \
      --comm_port="${comm_port}" \
      -d \
      ${runcompss_opts} \
      --project="${base_app_dir}/project.xml" \
      --resources="${base_app_dir}/resources.xml" \
      --python_interpreter="${python_interpreter}" \
      ${python_mpi_worker} \
      1>"${agent1_output_log}" 2>"${agent1_error_log}" &

    agent_pid="$!"
    AGENT_PIDS="${AGENT_PIDS} ${agent_pid}"

    retries="${NUM_RETRIES}"
    curl -XGET http://127.0.0.1:${rest_port}/COMPSs/test 1>/dev/null 2>/dev/null
    ev=$?
    while [ "$ev" != "0" ] && [ "${retries}" -gt "0" ]; do
      sleep 2s
      retries=$((retries - 1 ))
      curl -XGET http://127.0.0.1:${rest_port}/COMPSs/test 1>/dev/null 2>/dev/null
      ev=$?
    done

    RESULT=$(grep "test invoked" "${agent1_output_log}")
    if [ -z "${RESULT}" ]; then
        echo "Agent failed to start" > >(tee -a "${error_log}")
        exit 1
    fi
    echo "Agent started" > >(tee -a "${output_log}")
    sleep 2s

    # CHECK WHETHER THE PROJECT FILE HAS BEEN PROPERLY READ
    RESOURCES=$(curl -XGET http://127.0.0.1:${rest_port}/COMPSs/resources 2>/dev/null)
    num_RESOURCES=$(echo "${RESOURCES}" | jq '.resources | length')
    if [ ! "${num_RESOURCES}" == "1" ]; then
      echo "Wrong number of RESOURCE tags on the agent's output. Found .${num_RESOURCES}.; 1 expected." > >(tee -a "${error_log}")
      exit 1
    fi
    RESOURCE=$(echo "${RESOURCES}" | jq '.resources[] | select(.name=="COMPSsWorker01")')
    if [ -z "${RESOURCE}" ]; then
      echo "Wrong Resource on Agent; COMPSsWorker01 expected." > >(tee -a "${error_log}")
      exit 1
    fi
    DESCRIPTION=$(echo "${RESOURCE}" | jq '.description ')
    PROCESSOR_COUNT=$(echo "${DESCRIPTION}" | jq '.processors | length')
    if [ ! "${PROCESSOR_COUNT}" == "1" ]; then
      echo "Wrong number of Processors configured for the Agent. Found ${PROCESSOR_COUNT}; 1 expected." > >(tee -a "${error_log}")
      exit 1
    fi
    CPU_COUNT=$(echo "${DESCRIPTION}" | jq '.processors[] | select(.name=="MainProcessor") | .units')
    if [ ! "${CPU_COUNT}" == "4" ]; then
      echo "Wrong number of CPU cores configured for the Agent. Found ${CPU_COUNT}; 4 expected." > >(tee -a "${error_log}")
      exit 1
    fi

    # Invoking DemoFunction method
    "${COMPSS_HOME}/Runtime/scripts/user/compss_agent_call_operation" \
      --lang="PYTHON" \
      --master_node="127.0.0.1" \
      --master_port="${rest_port}" \
      --method_name="main" \
      "simple" > >(tee -a "${output_log}") 2> >(tee -a "${error_log}")
      ev=$?

      sleep 5s
      if [ "$ev" != "0" ]; then
      echo "Could not invoke main method." > >(tee -a "${error_log}")
      exit $ev
    fi
    echo "main function invoked" > >(tee -a "${output_log}")

    retries="3"
    while [ ! -f "${agent1_log_dir}/jobs/job1_NEW.out" ] && [ "${retries}" -gt "0" ]; do
      sleep 2s
      retries=$((retries - 1 ))
    done
    if [ ! -f "${agent1_log_dir}/jobs/job1_NEW.out" ]; then
      echo "Could not invoke main method." > >(tee -a "${error_log}")
      exit 1
    fi
    sleep 5
    if [ ! -f "${agent1_log_dir}/jobs/job2_NEW.out" ]; then
      echo "Could not invoke nested method." > >(tee -a "${error_log}")
      exit 1
    fi

    job1_method=$( grep "METHOD NAME" "${agent1_log_dir}/jobs/job1_NEW.out" | cut -d '=' -f3)
    job1_method="${job1_method::-1}"
    job2_method=$( grep "METHOD NAME" "${agent1_log_dir}/jobs/job2_NEW.out" | cut -d '=' -f3)
    job2_method="${job2_method::-1}"

    if [ ! "${job1_method}" == "main" ]; then
      echo "Unexpected method (${job1_method}) for job 1." > >(tee -a "${error_log}")
      exit 1
    fi
    if [ ! "${job2_method}" == "increment" ]; then
      echo "Unexpected method (${job2_method}) for job 2." > >(tee -a "${error_log}")
      exit 1
    fi
    job1_start=$(grep "hello main" "${agent1_log_dir}/jobs/job1_NEW.out")
    job2_start=$(grep "hello increment" "${agent1_log_dir}/jobs/job2_NEW.out")
    job2_in_value=$(echo "${job2_start}" | cut -d ' ' -f3)
    job2_in_str=$(echo "${job2_start}" | cut -d ' ' -f4)
    job1_end=$(grep "Updated object" "${agent1_log_dir}/jobs/job1_NEW.out")
    job1_end_value=$(echo "${job1_end}" | cut -d ' ' -f3)
    job1_end_str=$(echo "${job1_end}" | cut -d ' ' -f4)

    if [ ! "${job1_start}" == "hello main" ]; then
      echo "Main task didn't reach start point." > >(tee -a "${error_log}")
      exit 1
    fi
    job2_message=$(echo "${job2_start}" | awk '{print $1 " " $2}')
    if [ ! "${job2_message}" == "hello increment" ]; then
      echo "Increment task didn't reach start point." > >(tee -a "${error_log}")
      exit 1
    fi
    job1_message=$(echo "${job1_end}" | awk '{print $1 " " $2}')
    if [ ! "${job1_message}" == "Updated object" ]; then
      echo "Main task didn't reach start point." > >(tee -a "${error_log}")
      exit 1
    fi
    expected_value=$((job2_in_value + 1))
    if [ ! "${job1_end_value}" == "${expected_value}" ]; then
      echo "Unexpected integer value obtained from the test. Expecting ${expected_value} and ${job1_end_val} observed!" > >(tee -a "${error_log}")
      exit 1
    fi
    if [ ! "${job1_end_str}" == "${job2_in_str}" ]; then
      echo "Test modified the string value of the object and it shouldn't." > >(tee -a "${error_log}")
      exit 1
    fi

    echo "All task executed as expected and with the expected values."  > >(tee -a "${output_log}")

    kill_agents
    rm -rf /tmp/COMPSsWorker01/*
    AGENT_PIDS=""

    # Copy LOG files
    cp -rf "${log_dir}" "${target_log_folder}"
    port_offset=$((port_offset + 100 ))
  done

  #----------------------------------------------------------------------------------
  # Return execution status
  exit ${exit_value}
