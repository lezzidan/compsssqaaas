#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")

  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  # Compute result status
  FILES=10

  # Checks if the failed task has been executed through the creation of a job for each
  if [ ! -f "${target_log_folder}"/jobs/job"$FILES"_NEW.out ]; then
    echo "ERROR: All tasks have not completed succesfully."
    exit 1
  fi

  if [ -f "${target_log_folder}/jobs/job$((FILES+1))_NEW.out" ]; then
    echo "ERROR: More tasks than expected have been executed."
    exit 1
  fi
  #----------------------------------------------------------------------------------
  # Check locations of the data generated by the is_replicated 
  # Check if all members of group have been canceled
  output1=$(cat "${runtime_log}" | grep "\* file://COMPSsWorker01/tmp/COMPSsWorker01/" | grep "COMPSsWorker01/d1v2_" | wc -l)
  if [ "${output1}" -ne 8 ]; then
        echo "ERROR: The number of data locations in worker 1 is incorrect."
        exit 1
  fi

  output1=$(cat "${runtime_log}" | grep "\* file://COMPSsWorker02/tmp/COMPSsWorker02/" | grep "COMPSsWorker02/d1v2_" | wc -l)
  if [ "${output1}" -ne 8 ]; then
        echo "ERROR: The number of data locations in worker 2 is incorrect."
        exit 1
  fi
  
  #----------------------------------------------------------------------------------
  # ALL OK. Report result status
  exit 0
