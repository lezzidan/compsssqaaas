#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  # SPECIFIC TEST CHECKS
  job1_wd=$(grep "ls -l" "${target_log_folder}/jobs/job1_NEW.out" | wc -l)
  echo "Checking args (${job1_wd})" | tee -a "${output_file}"
  if [ "${job1_wd}" != "1" ]; then
    echo "ERROR: Args not respected (${job1_wd}). It should be 1." | tee -a "${output_file}"
    exit 1
  fi
  # Check job 3 custom working directory
  job2_wd=$(grep "CONTAINER INVOKER] On WorkingDir : " "${target_log_folder}/jobs/job2_NEW.out" | tr ":" "\n" | tail -n +2)
  job3_wd=$(grep "CONTAINER INVOKER] On WorkingDir : " "${target_log_folder}/jobs/job3_NEW.out" | tr ":" "\n" | tail -n +2)
  echo "Checking working dir \( ${job2_wd} == ${job3_wd} \)" | tee -a "${output_file}" 
  if [ "${job2_wd}" == "${job3_wd}" ]; then
    echo "ERROR: Custom working directory is not respected \( ${job2_wd} != ${job3_wd} \)" | tee -a "${output_file}"
    exit 1
  fi

  job4_wd=$(grep "HOLA=hola" "${target_log_folder}/jobs/job4_NEW.out" | wc -l)
  echo "Checking options (${job4_wd})" | tee -a "${output_file}"
  if [ "${job4_wd}" != "2" ]; then
    echo "ERROR: Options not respected (${job4_wd}" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # All ok
  exit 0

