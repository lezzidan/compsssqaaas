#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retry_num=$7
  execution_envs=$8

  # Global variables
  exit_value=1
  app_name="decorator_container.py"

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml
  sed -i '/<AppDir>/c<AppDir>'"${base_app_dir}/src"'\/<\/AppDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  # Run application
  echo
  echo "*** RUNNING PYTHON APPLICATION DECORATOR CONTAINER"

  export CUS=2
  export TEST_WORKING_DIR=$base_app_dir
  export CFG_FILE_PATH="$base_app_dir/src/config/"
  export DOCKER_OPTIONS="-e CFG_FILE_PATH=$CFG_FILE_PATH"
  for python_interpreter in ${execution_envs}; do
    echo "   - Running with Interpreter: ${python_interpreter}"
    output_log="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.outputlog"
    error_log="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.errorlog"
    specific_log_dir="${COMPSs_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"
    exec_target_log_folder="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"
    mkdir -p "${exec_target_log_folder}"
    expectedTime=80s

    python_mpi_worker=""
    if [ "$python_interpreter" == 'python3_mpi' ]; then
       echo "WARN: Test not requiered for ${python_interpreter}" | tee -a "${output_log}"
       continue
    fi

  cat > "${base_app_dir}/env_script.sh" << EOT
export COMPSS_MPIRUN_TYPE=openmpi
export DOCKER_WORKING_DIR_VOLUME=$DOCKER_WORKING_DIR_VOLUME
export DOCKER_WORKING_DIR_MOUNT=$DOCKER_WORKING_DIR_MOUNT
export DOCKER_APP_DIR_VOLUME=$DOCKER_APP_DIR_VOLUME
export DOCKER_APP_DIR_MOUNT=$DOCKER_APP_DIR_MOUNT
export DOCKER_PYCOMPSS_VOLUME=$DOCKER_PYCOMPSS_VOLUME
export DOCKER_PYCOMPSS_MOUNT=$DOCKER_PYCOMPSS_MOUNT
EOT

    cat "${base_app_dir}/env_script.sh" > >(tee "${output_log}")

    # shellcheck disable=SC2086
    timeout --signal=2 $expectedTime "${COMPSs_exec}" \
      --project="${base_app_dir}"/project.xml \
      --resources="${base_app_dir}"/resources.xml \
      --jvm_workers_opts="-Dcompss.worker.removeWD=false" \
      \
      --comm="$comm" \
      \
      --debug \
      ${runcompss_opts} \
      \
      --lang=python \
      --python_interpreter="${python_interpreter}" \
      ${python_mpi_worker} \
      --pythonpath="${base_app_dir}"/src \
      --specific_log_dir="${specific_log_dir}" \
      --env_script=${base_app_dir}/env_script.sh \
      "${base_app_dir}/src/${app_name}" > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

    # Check timeout
    if [[ "$?" = "124" ]]; then
      # Copy LOG files
      cp -rf "${specific_log_dir}"/* "${exec_target_log_folder}"

      # Report time out
      echo "[WARNING] Python Application timed out" >> "${output_log}"
      exit_value=124
    else
      # Copy LOG files
      cp -rf "${specific_log_dir}"/* "${exec_target_log_folder}"

      # Check result
      "${base_app_dir}"/result "${output_log}" "${error_log}" "${exec_target_log_folder}"
      exit_value=$?
    fi

    if [ ${exit_value} -ne 0 ]; then
      exit ${exit_value}
    fi
  done

  #----------------------------------------------------------------------------------
  # Return execution status
  exit ${exit_value}
