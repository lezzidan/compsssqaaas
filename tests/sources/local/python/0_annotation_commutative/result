#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  final_graph_expected=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  FILES=32

  # Checks file 6 content
  result=$(cat /tmp/sharedDisk/fileCommutativeTest6.txt)
  if [ "${result}" -ne 9 ]; then
    echo "ERROR: Final result is not correct. ${result} (Expected 9) "
    exit 1
  fi

  # Checks first file to write
  result=$(cat /tmp/sharedDisk/fileCommutativeTest1.txt)
  if [ "${result}" -ne 31 ]; then
    echo "ERROR: Final result is not correct. ${result} (Expected 31) "
    exit 1
  fi

  # Checks file 2 content
  result=$(cat /tmp/sharedDisk/fileCommutativeTest2.txt)
  if [ "${result}" -ne 2 ]; then
    echo "ERROR: Final result is not correct. ${result} (Expected 2) "
    exit 1
  fi

  # Checks file 3 content
  result=$(cat /tmp/sharedDisk/fileCommutativeTest3.txt)
  if [ "${result}" -ne 2 ]; then
    echo "ERROR: Final result is not correct. ${result} (Expected 2) "
    exit 1
  fi

  # Checks file 4 content
  result=$(cat /tmp/sharedDisk/fileCommutativeTest4.txt)
  if [ "${result}" -ne 1 ]; then
    echo "ERROR: Final result is not correct. ${result} (Expected 1) "
    exit 1
  fi

  # Checks file 5 content
  result=$(cat /tmp/sharedDisk/fileCommutativeTest5.txt)
  if [ "${result}" -ne 1 ]; then
    echo "ERROR: Final result is not correct. ${result} (Expected 1) "
    exit 1
  fi


  #Checks PSCO file content
  #result=$(cat /tmp/sharedDisk/fileCommutativeTestPSCO.txt)
  #if [ ${result} -ne 33333334444444 ]; then
  #  echo "ERROR: Final result is not correct. ${result} (Expected 33333334444444) "
  #  exit 1
  #fi

  # Checks that all tasks have been completed
  if [ ! -f "${target_log_folder}/jobs/job${FILES}_NEW.out" ]; then
    echo "ERROR: All tasks have not completed succesfully."
    exit 1
  fi

  if [ -f "${target_log_folder}/jobs/job$((FILES+1))_NEW.out" ]; then
    echo "ERROR: More tasks than expected have been executed."
    exit 1
  fi

    #----------------------------------------------------------------------------------
  # Check dot file
  final_graph_got=${target_log_folder}/monitor/complete_graph.dot
  graph_status=$(diff -U 0 "${final_graph_expected}" "${final_graph_got}" | grep -v ^@ | grep -v "#" | tail -n+3)
  if [ ! -z "${graph_status}" ]; then
    echo "[ERROR] Obtained graph file is not as expected" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # ALL OK. Report result status
  exit 0
