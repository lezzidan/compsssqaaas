#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  final_graph_expected=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")

  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  # Compute result status

  # Check that tasks were cancelled
  if grep -q "Task not cancelled" "${target_log_folder}"/jobs/job?_NEW.out; then
    echo "ERROR: Runinng tasks were not cancelled" | tee -a "${output_file}"
    exit 1
  fi

  FILES=12
  resultN=4

  # Checks if the file has been written as many times as expected
  result=$(cat /tmp/sharedDisk/taskGROUPS.txt | grep -o 2 | wc -l)
  if [ ${result} -ne $resultN ]; then
    echo "ERROR: The number of writing tasks is not correct. ${result}" | tee -a "${output_file}"
    exit 1
  fi

  # Checks if the failed task has been executed through the creation of a job for each
  if [ ! -f "${target_log_folder}"/jobs/job"$FILES"_NEW.out ]; then
    echo "ERROR: All tasks have not completed succesfully." | tee -a "${output_file}"
    exit 1
  fi

  if [ -f "${target_log_folder}/jobs/job$((FILES+1))_NEW.out" ]; then
    echo "ERROR: More tasks than expected have been executed." | tee -a "${output_file}"
    exit 1
  fi

  # Check if all tasks have finished
  output1=$(cat "${runtime_log}" | grep "with end status FINISHED" | wc -l)
  if [ "${output1}" -ne 8 ]; then
  	echo "ERROR: The number of finished tasks is not correct." | tee -a "${output_file}"
  	exit 1
  fi

  # Check if all members of group have been canceled
  output1=$(cat "${runtime_log}" | grep "with end status CANCELED" | wc -l)
  if [ "${output1}" -ne 8 ]; then
  	echo "ERROR: The number of canceled tasks is not correct." | tee -a "${output_file}"
  	exit 1
  fi

  # Check if the tasks have raised a COMPSsException
  output1=$(grep -c "COMPSs Exception raised :" "${runtime_log}")
  if [ "${output1}" -ne 2 ]; then
  	echo "ERROR: The number of COMPSsExceptions raised is not correct." | tee -a "${output_file}"
  	exit 1
  fi

  # Check the exception message
  output1=$(grep -c -E "Group failedGroup[0-9]*'s barrier raised a COMPSsException \( Exception raised from the third task\)" "${runtime_log}")
  if [ "${output1}" -ne 2 ]; then
  	echo "ERROR: The thrown exception message is not correct. ${output1}" | tee -a "${output_file}"
  	exit 1
  fi

  #----------------------------------------------------------------------------------
  # Check dot file
  final_graph_got=${target_log_folder}/monitor/complete_graph.dot
  graph_status=$(diff -U 0 "${final_graph_expected}" "${final_graph_got}" | grep -v ^@ | grep -v "#" | tail -n+3)
  if [ ! -z "${graph_status}" ]; then
    echo "[ERROR] Obtained graph file is not as expected" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # ALL OK. Report result status
  exit 0
