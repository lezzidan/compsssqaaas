#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retry_num=$7
  execution_envs=$8

  # Global variables
  exit_value=1
  app_name="module_implements.py"

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  # Run application
  echo
  echo "*** RUNNING PYTHON APPLICATION MODULE IMPLEMENTS"

  for python_interpreter in ${execution_envs}; do
    echo "   - Running with Interpreter: ${python_interpreter}"
    output_log="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.outputlog"
    error_log="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.errorlog"
    output_log_seq="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.seq_outputlog"
    error_log_seq="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.seq_errorlog"
    specific_log_dir="${COMPSs_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"
    exec_target_log_folder="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"
    mkdir -p "${exec_target_log_folder}"
    expectedTime=60s

    python_mpi_worker=""
    if [ "$python_interpreter" == 'python3_mpi' ]; then
       echo "WARN: Test not requiered for ${python_interpreter}" | tee -a "${output_log}"
       continue
    fi

    # Check that the pycompss module is available in the environment
    ${python_interpreter} -c "import pycompss"
    errCode=$?
    if [ $errCode -ne  0 ] ; then
      echo "[ERROR] THE pycompss MODULE IS NOT AVAILABLE IN THE SYSTEM." | tee -a "${output_log}"
      echo "CHECK THAT PYTHONPATH CONTAINS THE APPROPIATE MODULE PATH." | tee -a "${output_log}"
      exit $errCode
    fi

    # Sequential execution
    timeout --signal=2 "$expectedTime" \
      ${python_interpreter} "${base_app_dir}/src/${app_name}" > >(tee "${output_log_seq}") 2> >(tee "${error_log_seq}" >&2)
    seq_exit_value=$?

    # Check segmentation fault
    if [ "${seq_exit_value}" -eq 139 ]; then
      echo "[ERROR] Something really wrong happened during the sequential execution: segmentation fault" | tee -a "${output_log}"
      exit 139
    fi
    # Check timeout
    if [ "${seq_exit_value}" -eq 124 ]; then
      echo "[WARNING] Python Application timed out" | tee -a "${output_log}"
      exit 124
    fi
    # Check errors
    if [ "${seq_exit_value}" -ne 0 ]; then
      echo "[ERROR] Sequential execution failed" | tee -a "${output_log}"
      exit ${seq_exit_value}
    fi

    # COMPSs execution
    # shellcheck disable=SC2086
    timeout --signal=2 $expectedTime ${python_interpreter} -m pycompss \
      --project="${base_app_dir}"/project.xml \
      --resources="${base_app_dir}"/resources.xml \
      \
      --comm="$comm" \
      \
      --debug \
      ${runcompss_opts} \
      \
      --lang=python \
      --python_interpreter="${python_interpreter}" \
      ${python_mpi_worker} \
      --pythonpath="${base_app_dir}"/src \
      --specific_log_dir="${specific_log_dir}" \
      \
      "${base_app_dir}/src/${app_name}" > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

    # Check timeout
    if [[ "$?" = "124" ]]; then
      # Copy LOG files
      cp -rf "${specific_log_dir}"/* "${exec_target_log_folder}"

      # Report time out
      echo "[WARNING] Python Application timed out" >> "${output_log}"
      exit_value=124
    else
      # Copy LOG files
      cp -rf "${specific_log_dir}"/* "${exec_target_log_folder}"

      # Check result
      "${base_app_dir}"/result "${output_log}" "${error_log}" "${exec_target_log_folder}" "${output_log_seq}"
      exit_value=$?
    fi

    if [ ${exit_value} -ne 0 ]; then
      exit ${exit_value}
    fi
  done

  #----------------------------------------------------------------------------------
  # Return execution status
  exit ${exit_value}
