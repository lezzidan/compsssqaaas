#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi


  #----------------------------------------------------------------------------------
  jobs_logs="${target_log_folder}/jobs"
  echo $jobs_logs

  # testBasic
  hello_file=$(grep -ir -l "hello mpmd mpi tests" "$jobs_logs")
  hello=$(grep -i "hello mpmd mpi tests" "$hello_file")
  if [ "$hello" = "" ]; then
    echo "ERROR: TASK FAILED: testBasic function failed." | tee -a "${output_file}"
    exit 1
  else
    appearances=$(grep -c -i "hello mpmd mpi tests" "${hello_file}")
    if [ ! "$appearances" -eq "4" ]; then
      echo "ERROR: TASK FAILED: error in total # of processes in testBasic function." | tee -a "${output_file}"
      echo "  - GOT:      $appearances" | tee -a "${output_file}"
      echo "  - EXPECTED: 4 " | tee -a "${output_file}"
      exit 2
    fi
  fi

  # testParams
  monday_file=$(grep -r -l "date -d next monday" "$jobs_logs")
  mondayDate1=$(LANG=en_US date -d "next monday")
  mondayDate2=$(date -d "next monday")
  monday=$(grep -E "$mondayDate1|$mondayDate2" "$monday_file")
  if [ "$monday" = "" ]; then
    echo "ERROR: TASK FAILED: testParams function failed." | tee -a "${output_file}"
    echo "  - FILE:     $monday_file" | tee -a "${output_file}"
    echo "  - GOT:      $monday" | tee -a "${output_file}"
    echo "  - EXPECTED: $mondayDate1 or $mondayDate2" | tee -a "${output_file}"
    exit 1
  else
    appearances=$(grep -c "$mondayDate2" "$monday_file")
    if [ ! "$appearances" -eq "2" ]; then
      echo "ERROR: TASK FAILED: testParams function processes parameter failed." | tee -a "${output_file}"
      echo "  - GOT:      $appearances" | tee -a "${output_file}"
      echo "  - EXPECTED: 2 " | tee -a "${output_file}"
      exit 2
    fi
  fi

  friday_file=$(grep -r -l "date -d next friday" "$jobs_logs")
  fridayDate1=$(LANG=en_US date -d "next friday")
  fridayDate2=$(date -d "next friday")

  friday=$(grep -E "$fridayDate1|$fridayDate2" "$friday_file")
  if [ "$friday" = "" ]; then
    echo "ERROR: TASK FAILED: testParams function failed." | tee -a "${output_file}"
    echo "  - FILE:     $friday_file" | tee -a "${output_file}"
    echo "  - GOT:      $friday" | tee -a "${output_file}"
    echo "  - EXPECTED: $fridayDate1 or $fridayDate2" | tee -a "${output_file}"
    exit 1
  else
    appearances=$(grep -c "$fridayDate2" "$friday_file")
    if [ ! "$appearances" -eq "2" ]; then
      echo "$appearances"
      echo "ERROR: TASK FAILED: testParams function processes parameter failed." | tee -a "${output_file}"
      echo "  - GOT:      $appearances" | tee -a "${output_file}"
      echo "  - EXPECTED: 2 " | tee -a "${output_file}"
      exit 2
    fi
  fi

  # testFileInParam
  hellofile=$(grep -r -l "sed s/Hi/HELLO/g" "${jobs_logs}")
  hello=$(grep -r -l "HELLO, this is a simple test to grep." "${hellofile}")
  if [[ -z "$hello" ]]; then
     echo "ERROR: TASK FAILED: testFileInParam function failed." | tee -a "${output_file}"
    exit 1
  else
    appearances=$(grep -c "HELLO, this is a simple test to grep." "${hellofile}")
    if [ ! "$appearances" -eq "12" ]; then
      echo "ERROR: TASK FAILED: testFileInParam function processes parameter failed." | tee -a "${output_file}"
      exit 1
    fi
  fi

  # testStdOutFile
  std_out_file="src/outfile"
  output_str=$(grep -i "simple test" "$std_out_file")
  if [ "$output_str" = "" ]; then
    echo "ERROR: TASK FAILED: testStdOutFile function failed." | tee -a "${output_file}"
    exit 1
  fi

  # testParamInWD
  wd_out_file="param_wd_out"
  output_str=$(grep -i "test_param_in_wd" "$wd_out_file")
  if [ "$output_str" = "" ]; then
    echo "ERROR: TASK FAILED: testParamInWD function failed." | tee -a "${output_file}"
    exit 1
  fi


  # testDefaultValue
  wed_file=$(grep -r -l "date -d next wednesday" "$jobs_logs")
  wedDate1=$(LANG=en_US date -d "next wednesday")
  wedDate2=$(date -d "next wednesday")
  wed=$(grep -E "$wedDate1|$wedDate2" "$wed_file")
  if [ "$wed" = "" ]; then
    echo "ERROR: TASK FAILED: testDefaultValue function failed." | tee -a "${output_file}"
    echo "  - FILE:     wed_file" | tee -a "${output_file}"
    echo "  - GOT:      $wed" | tee -a "${output_file}"
    echo "  - EXPECTED: $wedDate1 or $wedDate2" | tee -a "${output_file}"
    exit 1
  fi

  # testDefaultValue_2
  # testDefaultValue
  wed_file=$(grep -r -l "date -d last wednesday" "$jobs_logs")
  wedDate1=$(LANG=en_US date -d "last wednesday")
  wedDate2=$(date -d "last wednesday")
  wed=$(grep -E "$wedDate1|$wedDate2" "$wed_file")
  if [ "$wed" = "" ]; then
    echo "ERROR: TASK FAILED: testDefaultValue_2 function failed." | tee -a "${output_file}"
    echo "  - FILE:     wed_file" | tee -a "${output_file}"
    echo "  - GOT:      $wed" | tee -a "${output_file}"
    echo "  - EXPECTED: $wedDate1 or $wedDate2" | tee -a "${output_file}"
    exit 1
  fi

exit 0
