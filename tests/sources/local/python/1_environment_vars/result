#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3
  comm=$4

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  # Check Task description
  # WARNING: Checks are performed only in NIO because in GAT we don't know the job description
  #          However, if the application has ended, the constraints are correctly loaded because the resource can strictly
  #          execute the task
  exit_value=0
  if [ "${comm}" == "es.bsc.compss.nio.master.NIOAdaptor" ]; then
    processorExpected="PROCESSOR MainProcessor TYPE=CPU COMPUTING_UNITS=2 SPEED=2.4 INTERNAL_MEMORY=-1.0 ARCHITECTURE=amd64 PROP_NAME=ThreadAffinity PROP_VALUE=Big"
    generalExpected="GENERAL_COUNTS TOTAL_CPUs=1 TOTAL_CPU_CU=2 TOTAL_GPUs=0 TOTAL_GPU_CU=0 TOTAL_FPGAs=0 TOTAL_FPGA_CU=0 TOTAL_OTHERs=0 TOTAL_OTHER_CU=0"
    memoryExpected="MEMORY SIZE=8.0 TYPE=Volatile"
    storageExpected="STORAGE SIZE=240.0 TYPE=SSD BANDWIDTH=50"
    osExpected="OPERATING_SYSTEM TYPE=Linux DISTRIBUTION=OpenSUSE VERSION=13.2"
    softwareExpected="SOFTWARE JAVA, PYTHON, COMPSS, "
    queuesExpected="HOST_QUEUES SEQUENTIAL, DEBUG, BSC, "
    pricesExpected="PRICE TIME_UNIT=-1 PRICE_PER_TIME=-1.0"
    wallclockExpected="WALLCLOCK=10"

    processorGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 10 | head -n 1 | tr "]" "\\n" | head -n 1)
    generalGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 9 | head -n 1 | tr "]" "\\n" | head -n 1)
    memoryGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 8 | head -n 1 | tr "]" "\\n" | head -n 1)
    storageGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 7 | head -n 1 | tr "]" "\\n" | head -n 1)
    osGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 6 | head -n 1 | tr "]" "\\n" | head -n 1)
    softwareGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 5 | head -n 1 | tr "]" "\\n" | head -n 1)
    queuesGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 4 | head -n 1 | tr "]" "\\n" | head -n 1)
    pricesGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 3 | head -n 1 | tr "]" "\\n" | head -n 1)
    wallclockGot=$(grep "Finished sending New Task" "${runtime_log}" | tr "[" "\\n" | tail -n 2 | head -n 1 | tr "]" "\\n" | head -n 1)

    if [ "${processorGot}" != "${processorExpected}" ]; then
      echo "ERROR: Processor constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${processorGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${processorExpected}" | tee -a "${output_file}"
      exit_value=1
    fi

    if [ "${generalGot}" != "${generalExpected}" ]; then
      echo "ERROR: General constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${generalGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${generalExpected}" | tee -a "${output_file}"
      exit_value=2
    fi

    if [ "${memoryGot}" != "${memoryExpected}" ]; then
      echo "ERROR: Memory constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${memoryGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${memoryExpected}" | tee -a "${output_file}"
      exit_value=3
    fi

    if [ "${storageGot}" != "${storageExpected}" ]; then
      echo "ERROR: Storage constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${storageGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${storageExpected}" | tee -a "${output_file}"
      exit_value=4
    fi

    if [ "${osGot}" != "${osExpected}" ]; then
      echo "ERROR: OS constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${osGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${osExpected}" | tee -a "${output_file}"
      exit_value=5
    fi

    if [ "${softwareGot}" != "${softwareExpected}" ]; then
      echo "ERROR: Software constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${softwareGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${softwareExpected}" | tee -a "${output_file}"
      exit_value=6
    fi

    if [ "${queuesGot}" != "${queuesExpected}" ]; then
      echo "ERROR: Queue constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${queuesGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${queuesExpected}" | tee -a "${output_file}"
      exit_value=7
    fi

    if [ "${pricesGot}" != "${pricesExpected}" ]; then
      echo "ERROR: Price constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${pricesGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${pricesExpected}" | tee -a "${output_file}"
      exit_value=8
    fi

    if [ "${wallclockGot}" != "${wallclockExpected}" ]; then
      echo "ERROR: Wallclock constraints do not match" | tee -a "${output_file}"
      echo "GOT: ${wallclockGot}" | tee -a "${output_file}"
      echo "EXPECTED: ${wallclockExpected}" | tee -a "${output_file}"
      exit_value=9
    fi
  fi

  #----------------------------------------------------------------------------------
  # Report result status
  exit ${exit_value}
