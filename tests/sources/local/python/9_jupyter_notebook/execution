#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retry_num=$7
  execution_envs=$8

  # Global variables
  exit_value=1
  app_name="Interactive"

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  # Run application
  echo
  echo "*** RUNNING PYTHON APPLICATION JUPYTER NOTEBOOK"

  for python_interpreter in ${execution_envs}; do
    echo "   - Running with Interpreter: ${python_interpreter}"
    output_log="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.outputlog"
    error_log="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}.errorlog"
    specific_log_dir="${COMPSs_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"
    exec_target_log_folder="${target_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"
    mkdir -p "${exec_target_log_folder}"
    expectedTime=60s

    html=""
    if [[ $comm == *"GAT"* ]]; then
      echo "Running a jupyter notebook test with GAT"
      if [[ $python_interpreter == *"mpi"* ]]; then
        echo "[WARNING] MPI worker not supported with GAT" >> "${output_log}"
        continue
      fi
      app_ipynb="simpleGAT.ipynb"
      html="simpleGAT.html"
    else
      echo "Running a jupyter notebook test with NIO"
      if [[ $python_interpreter == *"mpi"* ]]; then
        app_ipynb="simple_mpi.ipynb"
        html="simple_mpi.html"
      else
        app_ipynb="simple.ipynb"
        html="simple.html"
      fi
    fi
    html="${base_app_dir}/src/${html}"

    kernel=""
    if [[ $python_interpreter == "python3"* ]]; then
      kernel="python3"
    else
      echo "[ERROR] KERNEL NOT DEFINED FOR INTERPRETER: ${python_interpreter}" >> "${error_log}"
      exit 1
    fi

    echo "INFO: Running for ${python_interpreter} with kernel: ${kernel}"
    echo "INFO: Running notebook ${app_ipynb}"

    timeout --signal=2 $expectedTime \
      jupyter nbconvert \
      --to=html \
      --ExecutePreprocessor.kernel_name=${kernel} \
      --execute "${base_app_dir}/src/${app_ipynb}" > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

    # Print the latest redirected stdout and stderr
    last_compss_out_file=`ls -tr ${base_app_dir}/src/ | grep out | tail -n 1`
    last_compss_err_file=`ls -tr ${base_app_dir}/src/ | grep err | tail -n 1`
    cat ${base_app_dir}/src/${last_compss_out_file}
    cat ${base_app_dir}/src/${last_compss_err_file}

    mv "${COMPSs_log_folder}/${app_name}_01" "${COMPSs_log_folder}/${app_name}_${python_interpreter}_0${retry_num}"

    # Check timeout
    if [[ "$?" = "124" ]]; then
      # Copy LOG files
      cp -rf "${specific_log_dir}"/* "${exec_target_log_folder}"

      # Report time out
      echo "[WARNING] Python Application timed out" >> "${output_log}"
      exit_value=124
    else
      # Copy LOG files
      cp -rf "${specific_log_dir}"/* "${exec_target_log_folder}"

      # Check result
      "${base_app_dir}"/result "${output_log}" "${error_log}" "${exec_target_log_folder}" "${base_app_dir}" "${comm}" "${html}"
      exit_value=$?
    fi

    if [ ${exit_value} -ne 0 ]; then
      exit ${exit_value}
    fi
  done

  #----------------------------------------------------------------------------------
  # Return execution status
  exit ${exit_value}
