#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi


  #----------------------------------------------------------------------------------
  jobs_logs="${target_log_folder}/jobs"
  echo $jobs_logs

  # testBasic (one print per epilog and prolog)
  job_file=$(grep -r -l "just a prolog" "$jobs_logs")
  if [ "$job_file" = "" ]; then
    echo "ERROR: TASK FAILED: testBasic function failed." | tee -a "${output_file}"
    echo "  - Prolog log not found!" | tee -a "${output_file}"
    exit 1
  fi

  job_file=$(grep -r -l "just an epilog" "$jobs_logs")
  if [ "$job_file" = "" ]; then
    echo "ERROR: TASK FAILED: testBasic function failed." | tee -a "${output_file}"
    echo "  - Epilog log not found!" | tee -a "${output_file}"
    exit 1
  fi

  # testParams (prints monday date as prolog)
  monday_file=$(grep -r -l "Parameter values: next monday next friday" "$jobs_logs")
  mondayDate1=$(LANG=en_US date -d "next monday")
  mondayDate2=$(date -d "next monday")
  echo $monday_file
  monday=$(grep -E "$mondayDate1|$mondayDate2" "$monday_file")
  if [ "$monday" = "" ]; then
    echo "ERROR: TASK FAILED: testParams function failed." | tee -a "${output_file}"
    echo "  - FILE:     $monday_file" | tee -a "${output_file}"
    echo "  - GOT:      $monday" | tee -a "${output_file}"
    echo "  - EXPECTED: $mondayDate1 or $mondayDate2" | tee -a "${output_file}"
    exit 1
  fi

  # testParams (prints friday date as epilog)
  friday_file=$(grep -r -l "Parameter values: next monday next friday" "$jobs_logs")
  fridayDate1=$(LANG=en_US date -d "next friday")
  fridayDate2=$(date -d "next friday")
  friday=$(grep -E "$fridayDate1|$fridayDate2" "$friday_file")
  if [ "$friday" = "" ]; then
    echo "ERROR: TASK FAILED: testParams function failed." | tee -a "${output_file}"
    echo "  - FILE:     $friday_file" | tee -a "${output_file}"
    echo "  - GOT:      $friday" | tee -a "${output_file}"
    echo "  - EXPECTED: $fridayDate1 or $fridayDate2" | tee -a "${output_file}"
    exit 1
  fi

  # testMpiSkipFailure
  success_str=$(grep -r -l "prolog failed successfully" "$jobs_logs")
  if [ "$success_str" = "" ]; then
    echo "ERROR: TASK FAILED: testMpiSkipFailure function failed." | tee -a "${output_file}"
    echo "  - Prolog failure shouldn't have stopped the execution!" | tee -a "${output_file}"
    exit 1
  fi
  # testFileInParam
  p_str=$(grep -r -l "greetings from the prolog" "$jobs_logs")
  if [ "$p_str" = "" ]; then
    echo "ERROR: TASK FAILED: testFileInParam function failed." | tee -a "${output_file}"
    echo "  - Prolog file in param has not been read!" | tee -a "${output_file}"
    exit 1
  fi
  echo "________________________"
  e_str=$(grep -r -l "greetings from the epilog" "$jobs_logs")
  if [ "$e_str" = "" ]; then
    echo "ERROR: TASK FAILED: testFileInParam function failed." | tee -a "${output_file}"
    echo "  - Epilog file in param has not been read!" | tee -a "${output_file}"
    exit 1
  fi
  echo "________________________"

  # testStdOutFile
  std_out_file="src/misc/outfile"
  cat "src/misc/outfile"
  output_str=$(grep -i "some text for epilog" "$std_out_file")
  if [ "$output_str" = "" ]; then
    echo "ERROR: TASK FAILED: testStdOutFile function failed." | tee -a "${output_file}"
    echo "  - Epilog STD OUT file doesn't contain the expected string!" | tee -a "${output_file}"
    exit 1
  fi

  # testOutParam
  p_str=$(grep -r -l "AAA_BBB" "$jobs_logs")
  if [ "$p_str" = "" ]; then
    echo "ERROR: TASK FAILED: testOutParam function failed." | tee -a "${output_file}"
    echo "  - Prolog params not of task_1 printed!" | tee -a "${output_file}"
    exit 1
  fi
  e_str=$(grep -r -l "CCC_DDD" "$jobs_logs")
  if [ "$e_str" = "" ]; then
    echo "ERROR: TASK FAILED: testOutParam function failed." | tee -a "${output_file}"
    echo "  - Epilog params not of task_1 printed!" | tee -a "${output_file}"
    exit 1
  fi
  p_str=$(grep -r -l "prolog_BBB" "$jobs_logs")
  if [ "$p_str" = "" ]; then
    echo "ERROR: TASK FAILED: testOutParam function failed." | tee -a "${output_file}"
    echo "  - Prolog params not of task_2 printed!" | tee -a "${output_file}"
    exit 1
  fi
  e_str=$(grep -r -l "epilog_DDD" "$jobs_logs")
  if [ "$e_str" = "" ]; then
    echo "ERROR: TASK FAILED: testOutParam function failed." | tee -a "${output_file}"
    echo "  - Epilog params not of task_2 printed!" | tee -a "${output_file}"
    exit 1
  fi
  echo "________________________"
exit 0
