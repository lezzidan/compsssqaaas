#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"
  resources_log="${target_log_folder}/resources.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a "${output_file}"
      exit 1
  fi

  #----------------------------------------------------------------------------------
  FILES=16
  writers=8

  #Checks first file to write
  result=$(cat /tmp/sharedDisk/file1.txt)
  if [ ${#result} -ne $writers ]; then
    echo "ERROR: Final result is not correct. ${#result} "
    exit 1
  fi

  #Checks second file to write
   result=$(cat /tmp/sharedDisk/file2.txt)
  if [ ${#result} -ne $writers ]; then
    echo "ERROR: Final result is not correct. ${#result} "
    exit 1
  fi

  #Checks that all tasks have been completed
  if [ ! -f "${target_log_folder}/jobs/job${FILES}_NEW.out" ]; then
    echo "ERROR: All tasks have not completed succesfully."
    exit 1
  fi

  if [ -f "${target_log_folder}/jobs/job$((FILES+1))_NEW.out" ]; then
    echo "ERROR: More tasks than expected have been executed."
    exit 1
  fi

  # Check concurrent execution
  output1=$(grep "Opening /" "${output_file}" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +1)
  output2=$(grep "File target Location: " "${output_file}" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +1)
  if [ "$output2" -lt $((output1+10000)) ]; then
    echo "ERROR: It does not wait for all tasks to be finished"
    exit 1
  fi

  output1=$(grep "Opening storage:" "${output_file}" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }'| head -n +1)
  output2=$(grep "External PSCO target Location" "${output_file}" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +1)
  if [ $((output2-8000)) -ge "$output1" ]; then
    echo "ERROR: Concurrent type not working"
    exit 1
  fi

  # Check inout execution
  output3=$(grep "Opening /" "${output_file}" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +2 | tail -n 1)
  output4=$(grep "File target Location: " "${output_file}" | tr "[" " " | tr "(" " " | tr ")" " " | awk '{ print $1 }' | head -n +2 | tail -n 1)
  if [ $((output4-8000)) -lt "$output3" ]; then
    echo "ERROR: It does not wait for all tasks to be finished"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # ALL OK. Report result status
  exit 0
