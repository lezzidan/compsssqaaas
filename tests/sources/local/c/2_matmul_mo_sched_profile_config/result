#!/bin/bash -e

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f "${output_file}" ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 "${output_file}")
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a "${output_file}"
        exit 1
     fi
  else
     echo "[ERROR] Output file not found" | tee -a "${output_file}"
     exit 1
  fi
  # Check that ErrorManager has not raised any ERROR or FATAL message
  if [ -f "${error_file}" ]; then
    if grep -E "\\[ERRMGR\\].*(ERROR|FATAL|Shutting down COMPSs)" "${error_file}"; then
      echo "ERROR: ErrorManager has raised a fatal error" | tee -a "${output_file}"
      exit 1
    fi
  else
    # Empty error file, no exceptions could have been raised
    :
  fi
  # Check that the Runtime has not registered any fatal error
  if [ -f "${runtime_log}" ]; then
    if grep -E "ErrorManager\\].*\\[ERRMGR\\].*Error detected. Shutting down COMPSs" "${runtime_log}"; then
      echo "ERROR: ErrorManager has registered a fatal error in the runtime.log" | tee -a "${output_file}"
      exit 1
    fi
  else
    echo "[ERROR] runtime.log not found" | tee -a "${output_file}"
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # Check that JNI has not raised an error
  jni_error=$(grep "Exception in thread" "${error_file}" | cat)
  if [ -n "${jni_error}" ]; then
    echo "ERROR: JNI HAS RAISED A FATAL ERROR. TEST FAILED." | tee -a "${output_file}"
    exit 1
  fi

  #---------------------------------------------------------------------------------- 
  # Compute result status
  result=$(grep "The result is" "${output_file}" | cut -c 15-)
  expected_result=256 

  result=${result::-1}

  # Report result status
  if [ "$result" != "$expected_result" ]; then
     echo "ERROR ON TASKS SCHEDULE" | tee -a "${output_file}"
     echo "EXPECTED RESULT: $expected_result" | tee -a "${output_file}"
     echo "GOT: $result" | tee -a "${output_file}"
     exit 1
  fi

  # Check if config is loaded
  result_config=$(grep -c "Reading Multi-objective from file mo_config.properties" "${runtime_log}")
  expected_config=1
  if [ "$result_config" != "$expected_config" ]; then
     echo "ERROR CONFIG NOT LOADED" | tee -a "${output_file}"
     echo "EXPECTED RESULT: $expected_config" | tee -a "${output_file}"
     echo "GOT: $result_config" | tee -a "${output_file}"
     exit 1
  fi
  # Check loaded params
  result_op_loaded=$(grep -c "LOADED OPTIMIZATION_PARAMETER\\: ENERGY" "${runtime_log}")
  result_bound_loaded=$(grep -c "LOADED BOUNDARIES: \\[200, 500, 5, 500000, 20\\]" "${runtime_log}")
  if [ "$result_op_loaded" != "$expected_config" ]; then
     echo "ERROR INCORRECT OPTIMIZATION PARAMETER" | tee -a "${output_file}"
     echo "EXPECTED RESULT: $expected_config" | tee -a "${output_file}"
     echo "GOT: $result_op_loaded" | tee -a "${output_file}"
     exit 1
  fi
  if [ "$result_bound_loaded" != "$expected_config" ]; then
     echo "ERROR INCORRECT BOUNDARIES" | tee -a "${output_file}"
     echo "EXPECTED RESULT: $expected_config" | tee -a"${output_file}"
     echo "GOT: $result_bound_loaded" | tee -a "${output_file}"
     exit 1
  fi
  # Check loaded params
  result_profile_loaded=$(grep -c "Input profile detected. Reading from file matmul_mo_in.profile" "${runtime_log}")
  if [ "$result_profile_loaded" != "$expected_config" ]; then
     echo "ERROR INCORRECT OPTIMIZATION PARAMETER" | tee -a "${output_file}"
     echo "EXPECTED RESULT: $expected_config" | tee -a "${output_file}"
     echo "GOT: $result_profile_loaded" | tee -a "${output_file}"
     exit 1
  fi
  if [ ! -f matmul_mo_out.profile ]; then
        echo "ERROR out profile not found." | tee -a "${output_file}"
        exit 1
  fi

  exit 0