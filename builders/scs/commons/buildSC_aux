#!/bin/bash

  #############################################################
  # Name: buildSC_aux
  # Description: SCRIPT FOR LOCAL COMPSs BUILD in SuperComputers
  # Parameters: <targetDir>               Base Target Installation folder
  #             <modules>                 Modules needed to perform installation
  #             <unload_modules>          Modules to be unloaded before python binding installation
  #             <run_before_py3_modules>        Command to run before py3 module load
  #             <py3_modules>                   Modules needed to perform python3 binding installation
  #             <run_before_py3_other_modules>  Command to run before other py3 module load
  #             <py3_other_modules>             Modules needed to perform additional python3 binding installations
  #             <additionalExports>       Additional exports to perform installation
  #             <queues_cfg>              CFG to set as default
  #             <extrae_with_openmpi>     Extrae with openmpi enabled
  #             <openmpi_version>         OpenMPI module version
  #             <extrae_with_impi>        Extrae with impi enabled
  #             <impi_version>            IMPI module version
  #             <autoparallel>            Install the AutoParallel module
  #             <c_binding>               Install the c-binding
  #
  # ATTENTION: DO NOT EXECUTE THIS FILE. IT IS AUTOMATICALLY
  #            EXECUTED FROM buildSC script
  #############################################################

  usage() {
    echo "Incorrect number of parameters"
    echo " Usage: buildSC_aux <FullTargetPath> <modules> <unload_modules> <run_before_py3_modules> <py3_modules> <run_before_py3_other_modules> <py3_other_modules> <additionalExports> <queues_cfg> <extrae_with_openmpi> <openmpi_version> <extrae_with_impi> <impi_version> <autoparallel> <c_binding>"
    echo " "
    exit 1
  }

  # INSTALLS ALL THE NECESSARY JARS FOR AN ADAPTOR.
  # REQUIRES 2 PARAMETERS:
  #  $1 THE PATH TO THE COMPILED ADAPTOR ROOT FOLDER
  #  $2 PATH WHERE TO INSTALL THE ADAPTOR
  install_adaptor() {
    local src_path=$1
    local dest_path=$2

    adaptor_name=$(basename "${src_path}")
    echo "------ Copying ${adaptor_name} adaptor"
    mkdir "${dest_path}/${adaptor_name}"
    if [ -d "${src_path}"/master/ ]; then
      mkdir "${dest_path}/${adaptor_name}"/master
      cp "${src_path}"/master/*.jar "${dest_path}/${adaptor_name}"/master
      if [ -f "${src_path}"/master/properties ]; then
        cp "${src_path}"/master/properties "${dest_path}/${adaptor_name}"/master
      fi
    fi
    if [ -d "${src_path}"/worker/ ]; then
      mkdir "${dest_path}/${adaptor_name}"/worker
      cp "${src_path}"/worker/*.jar "${dest_path}/${adaptor_name}"/worker
    fi
    if [ -f "${src_path}"/worker/properties ]; then
      cp "${src_path}"/worker/properties "${dest_path}/${adaptor_name}"/worker
    fi
    if [ -d "${src_path}"/scripts/ ]; then
      mkdir -p "${targetDir}"/Runtime/scripts/system/adaptors/"${adaptor_name}"
      cp -r "${src_path}"/scripts/* "${targetDir}"/Runtime/scripts/system/adaptors/"${adaptor_name}"
    fi
  }


  ####################
  # MAIN
  ####################

  # Get parameters
  if [ $# -ne 16 ]; then
    usage
  fi

  # SET SCRIPT VARIABLES
  targetDir=$1
  modules=$2
  unload_modules_before_python=$3
  run_before_py3_modules=$4
  py3_modules=$5
  run_before_py3_other_modules=$6
  py3_other_modules=$7
  additionalExports=$8
  additional_module_use_folder=$9
  queues_cfg=${10}
  extrae_with_openmpi=${11}
  openmpi_version=${12}
  extrae_with_impi=${13}
  impi_version=${14}
  autoparallel=${15}
  c_binding=${16}

  SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  TMP_DIR=${SCRIPT_DIR}/tmp

  echo "- SC script Dir = ${SCRIPT_DIR}"
  echo "- SC tmp Dir    = ${TMP_DIR}"
  echo "- SC target Dir = ${targetDir}"

  # Load needed modules on MN
  echo "- Load modules on SC account"
  module purge
  # shellcheck disable=SC2086
  module load ${modules}
  ev=$?
  if [ $ev -ne 0 ]; then
    echo "ERROR: Cannot load required modules"
    exit $ev
  fi

  # Save original path to remove libxml imports that crashes python binding in mt installation
  originalPath=$PATH

  # Load additional exports
  eval ${additionalExports}
  echo "NEW PATH=$PATH"

  # Use external modules
  if [ "$additional_module_use_folder" != "ignore" ]; then
    #shellcheck disable=SC2086
    module use ${additional_module_use_folder}
  fi

  # CREATE TARGET FOLDER
  echo "- Create target folder"
  rm -rf "${targetDir}"
  mkdir -p "${targetDir}"
  mkdir -p "${targetDir}/Doc"
  mkdir -p "${targetDir}/Dependencies"
  mkdir -p "${targetDir}/Dependencies/extrae"
  mkdir -p "${targetDir}/Runtime"
  mkdir -p "${targetDir}/Runtime/configuration"
  mkdir -p "${targetDir}/Runtime/scripts"
  mkdir -p "${targetDir}/Runtime/adaptors"
  mkdir -p "${targetDir}/Runtime/connectors"
  mkdir -p "${targetDir}/Runtime/cloud-conn"
  mkdir -p "${targetDir}/Runtime/scheduler"
  mkdir -p "${targetDir}/Runtime/checkpointer"
  mkdir -p "${targetDir}/Tools"
  mkdir -p "${targetDir}/Tools/monitor"
  mkdir -p "${targetDir}/Tools/storage"
  mkdir -p "${targetDir}/Bindings"
  mkdir -p "${targetDir}/Bindings/bindings-common"
  mkdir -p "${targetDir}/cli"

  # RUNTIME DEPLOYMENT
  echo "- Copy Runtime deployment files"

  # Doc
  echo "--- Copy docs"
  cp "${TMP_DIR}"/changelog "${targetDir}"
  cp "${TMP_DIR}"/LICENSE "${targetDir}"
  cp "${TMP_DIR}"/NOTICE "${targetDir}"
  cp "${TMP_DIR}"/README.md "${targetDir}"
  cp "${TMP_DIR}"/RELEASE_NOTES "${targetDir}"

  # Dependencies
  echo "--- Copy dependencies"
  cp -r "${TMP_DIR}"/dependencies/JAVA_GAT "${targetDir}"/Dependencies/
  cp -r "${TMP_DIR}"/files/paraver "${targetDir}"/Dependencies/

  echo "---- Install extrae ----"
  cd "${TMP_DIR}"/dependencies || exit 1
  # Sequential installation
  ./install_extrae.sh "${TMP_DIR}"/dependencies/extrae "${targetDir}"/Dependencies/extrae false
  ev=$?
  if [ $ev -ne 0 ]; then
    echo "ERROR: Failed to install extrae sequential dependency"
    exit $ev
  fi

  # OpenMPI
  if [ "${extrae_with_openmpi}" == "true" ]; then
    module load openmpi"${openmpi_version}"
    ./install_extrae.sh "${TMP_DIR}"/dependencies/extrae "${targetDir}"/Dependencies/extrae-openmpi true
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install extrae openmpi dependency"
      exit $ev
    fi
    module unload openmpi
  fi

  # IMPI
  if [ "${extrae_with_impi}" == "true" ]; then
    module load intel impi"${impi_version}"
    ./install_extrae.sh "${TMP_DIR}"/dependencies/extrae "${targetDir}"/Dependencies/extrae-impi true
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install extrae impi dependency"
      exit $ev
    fi
    module unload impi
  fi
  cd "${SCRIPT_DIR}" || exit 1

  # Streaming dependencies
  cp -r "${TMP_DIR}"/dependencies/kafka "${targetDir}"/Dependencies/

  # Restore original path
  export PATH=${originalPath}

  # Config
  echo "--- Copy configuration"
  find "${TMP_DIR}"/compss/runtime/config -name src -print0 | xargs -r -0 rm -rf
  find "${TMP_DIR}"/compss/runtime/config -name target -print0 | xargs -r -0 rm -rf
  find "${TMP_DIR}"/compss/runtime/config -name pom.xml -print0 | xargs -r -0 rm -rf
  cp -r "${TMP_DIR}"/compss/runtime/config/* "${targetDir}"/Runtime/configuration/
  sed -i -e 's#/opt/COMPSs/#'"${targetDir}"'#g'  "${targetDir}"/Runtime/configuration/xml/projects/default_project.xml

  # Scripts
  echo "--- Copy scripts"
  cp -r "${TMP_DIR}"/compss/runtime/scripts/* "${targetDir}"/Runtime/scripts/
  cp "${targetDir}"/Runtime/scripts/queues/supercomputers/"${queues_cfg}" "${targetDir}"/Runtime/scripts/queues/supercomputers/default.cfg

  # Adaptors
  echo "--- Copy adaptors"
  find "${TMP_DIR}/compss/runtime/adaptors" -name pom.xml -delete
  find "${TMP_DIR}/compss/runtime/adaptors" -name "*.iml" -delete
  rm -r "${TMP_DIR}/compss/runtime/adaptors/commons"
  rm -r "${TMP_DIR}/compss/runtime/adaptors/execution"
  rm -r "${TMP_DIR}/compss/runtime/adaptors/engine"
  path_source=${TMP_DIR}/compss/runtime/adaptors
  path_target=${targetDir}/Runtime/adaptors
  for adaptor in ${path_source}/*; do
    adaptor_name=$(basename "${adaptor}")
    if [ "${adaptor_name}" != "target" ] && [ "${adaptor_name}" != "checkstyle-cachefile" ]; then
      install_adaptor "${adaptor}" "${path_target}"
      if [ "${adaptor_name}" == "agent" ]; then
        for agent in ${adaptor}/*; do
            agent_name=$(basename "$agent")
            if [ "${agent_name}" != "target" ]; then
               install_adaptor "${agent}" "${path_target}"
            fi
        done
      fi
    fi
  done

  # Checkpointer
  echo "--- Copy checkpointer"
  checkpointers=$(find "${TMP_DIR}"/compss/runtime/checkpointer/ -name "*.jar")
  for checkpointer in ${checkpointers}; do
    cp "$checkpointer" "${targetDir}/Runtime/checkpointer/"
  done
  
  # Schedulers
  echo "--- Copy schedulers"
  rm -r "${TMP_DIR}"/compss/runtime/scheduler/commons
  rm -r "${TMP_DIR}"/compss/runtime/scheduler/test
  schedulers=$(find "${TMP_DIR}"/compss/runtime/scheduler/ -name "*.jar")
  for scheduler in $schedulers; do
    cp "$scheduler" "${targetDir}"/Runtime/scheduler/
  done

  # Storage
  echo "--- Copy storage implementations"
  cd "${TMP_DIR}/utils/storage/redisPSCO" || exit 1
  ./make_bundle.sh
  cp -r COMPSs-Redis-bundle "${targetDir}/Tools/storage/redis"
  cd "${SCRIPT_DIR}" || exit 1

  # Connectors
  echo "--- Copy Runtime Connectors"
  connectors=$(find "${TMP_DIR}"/compss/runtime/resources/ -name "*.jar" | grep -v "cloud-conn")
  for conn in $connectors; do
    cp "$conn" "${targetDir}"/Runtime/connectors/
  done
  echo "--- Copy CONN Connectors"
  connectors=$(find "${TMP_DIR}"/compss/runtime/resources/ -name "*.jar" | grep "cloud-conn")
  for conn in $connectors; do
    cp "$conn" "${targetDir}"/Runtime/cloud-conn/
  done

  # Engine
  echo "--- Copy engine"
  cp "${TMP_DIR}"/compss/runtime/compss-engine.jar "${targetDir}"/Runtime/

  # Agent
  echo "--- Copy Agent"
  cp "${TMP_DIR}"/compss/agent/compss-agent-impl.jar "${targetDir}"/Runtime/

  # TOOLS DEPLOYMENT
  echo "--- Copy trace modifications"
  mkdir -p "${targetDir}/Tools/tracing/"
  cp -r "${TMP_DIR}/compss/tools/tracing/target/compss-tracing.jar" "${targetDir}/Tools/tracing/"

  echo "- Deploying COMPSs Tools"
  cd "${TMP_DIR}" || exit 1
  tar xzf apache-tomcat.tar.gz
  cd "${SCRIPT_DIR}" || exit 1
  mv "${TMP_DIR}"/apache-tomcat-* "${targetDir}"/Tools/monitor/apache-tomcat/
  rm -rf "${targetDir}"/Tools/monitor/apache-tomcat/webapps/*
  rm -f "${targetDir}"/Tools/monitor/apache-tomcat/conf/server.xml
  cp -r "${TMP_DIR}"/compss/tools/monitor/target/*.war "${targetDir}"/Tools/monitor/apache-tomcat/webapps/
  cp "${TMP_DIR}"/compss/tools/monitor/target/classes/compss-monitor.conf "${targetDir}"/Tools/monitor/apache-tomcat/conf/
  cp "${TMP_DIR}"/compss/tools/monitor/target/classes/server.xml "${targetDir}"/Tools/monitor/apache-tomcat/conf/
  cp "${TMP_DIR}"/compss/tools/monitor/target/classes/*log4j* "${targetDir}"/Tools/monitor/

  # BINDINGS DEPLOYMENT
  # - Binding-common
  echo "- Deploying bindings-common files"
  cd "${TMP_DIR}"/compss/programming_model/bindings/bindings-common || exit 1
  ./install_common "${targetDir}"/Bindings/bindings-common
  ev=$?
  if [ $ev -ne 0 ]; then
    echo "ERROR: Failed to install bindings-common"
    exit $ev
  fi
  # - C binding
  if [ "${c_binding}" == "true" ]; then
    echo "- Deploying c-binding files"
    cd "${TMP_DIR}"/compss/programming_model/bindings/c || exit 1
    ./install "${targetDir}"/Bindings/c true
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install C-binding"
      exit $ev
    fi
    mkdir -p "${targetDir}"/Runtime/scripts/system/c/
    cp "${targetDir}"/Bindings/c/bin/* "${targetDir}"/Runtime/scripts/system/c
    cp ./compss_build_app "${targetDir}"/Runtime/scripts/user/
  fi

  # - Python binding
  echo "- Deploying python-binding files"
  if [ "$unload_modules_before_python" != "ignore" ]; then
    #shellcheck disable=SC2086
    module unload ${unload_modules_before_python}
  fi
  cd "${TMP_DIR}"/compss/programming_model/bindings/python || exit 1
  if [ -n "$run_before_py3_modules" ]; then
    if [ "$run_before_py3_modules" != "ignore" ]; then
       echo " Running : ${run_before_py3_modules}"
       eval "${run_before_py3_modules}"
    fi
  fi
  if [ -n "$py3_modules" ]; then
    echo "    - For python 3"
    if [ "$py3_modules" != "ignore" ]; then
      #shellcheck disable=SC2086
      module load ${py3_modules}
    fi
    # If installed, unify installations (second boolean to true)
    ./install "${targetDir}"/Bindings/python false python3
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install Python-binding for Python 3"
      exit $ev
    fi
    if [ "$py3_modules" != "ignore" ]; then
      #shellcheck disable=SC2086
      module unload ${py3_modules}
    fi
  fi
  if [ -n "$py3_other_modules" ]; then
    if [ "$py3_other_modules" != "ignore" ]; then
	if [ -n "$run_before_py3_other_modules" ]; then
	   if [ "$run_before_py3_other_modules" != "ignore" ]; then
	      echo "Running: ${run_before_py3_other_modules}"
	      eval "${run_before_py3_other_modules}"
           fi
	fi
        for py3_mod in $py3_other_modules
        do
            echo "    - For $py3_mod"
            #shellcheck disable=SC2086
            module load ${py3_mod}
            # If installed, unify installations (second boolean to true)
            ./install "${targetDir}"/Bindings/python false python3
            ev=$?
            if [ $ev -ne 0 ]; then
              echo "ERROR: Failed to install Python-binding for Python 3"
              exit $ev
            fi
            #shellcheck disable=SC2086
            module unload ${py3_mod}
        done
    fi
  fi
  cd "${SCRIPT_DIR}" || exit 1

  # - CLI
  echo "- Deploying cli"
  cd "${TMP_DIR}"/cli || exit 1
  module load ${py3_modules}
  ./install_sc.sh "${targetDir}"/cli
  cd "${SCRIPT_DIR}" || exit 1

  # ADD RUNCOMPSS TO PROFILE
  mkdir -p "${targetDir}"/etc/profile.d/
  echo " - Adding runcompss to profile..."
  echo "export PATH=\$PATH:${targetDir}/Runtime/scripts/user:/opt/COMPSs/Runtime/scripts/utils" > "${targetDir}"/etc/profile.d/compss.sh
  echo " - Runcompss added to user profile"
  echo " "
  echo " - Adding compss-engine.jar to profile..."
  echo "export CLASSPATH=\$CLASSPATH:${targetDir}/Runtime/compss-engine.jar" >> "${targetDir}"/etc/profile.d/compss.sh
  echo " - compss-engine.jar added to user profile"
  echo " "
  echo " - Adding c-binaries to profile..."
  echo "export PATH=\$PATH:${targetDir}/Bindings/c/bin" >> "${targetDir}"/etc/profile.d/compss.sh
  echo " - c-binaries added to user profile"
  echo " "
  #echo " - Adding PyCOMPSs to user profile..."
  #echo "export PYTHONPATH=\$PYTHONPATH:${targetDir}/Bindings/python/" >> "${targetDir}"/etc/profile.d/compss.sh
  #echo " - PyCOMPSs added to user profile"
  #echo " "

  # ADD MONITOR SCRIPT TO ETC
  echo "- Add monitor script to init.d"
  mkdir -p "${targetDir}"/etc/init.d/
  cp "${TMP_DIR}"/compss/tools/monitor/scripts/compss-monitor "${targetDir}"/etc/init.d/
  chmod 755 "${targetDir}"/etc/init.d/compss-monitor

  # ERASE TMP FILES
  echo "- Erase tmp files"
  rm -rf "${TMP_DIR}"

  # SET TARGETDIR PERMISSIONS
  echo "- Set COMPSs permissions"
  chmod -R 775 "${targetDir}"
  chmod -R 777 "${targetDir}"/Runtime/configuration/

  # Create public usage log file
  log_usage_file="${targetDir}/usage.log"
  echo -e "USAGE DATE\\t\\t\\tUSER" > "${log_usage_file}"
  echo -e "$(date)\\tINSTALLATION" >> "${log_usage_file}"
  chmod 777 "${log_usage_file}"

  # END
  exit 0
